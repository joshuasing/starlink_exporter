// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.31.1
// source: spacex_api/device/wifi_config.proto

package device

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MeshAuth int32

const (
	MeshAuth_MESH_AUTH_UNKNOWN   MeshAuth = 0
	MeshAuth_MESH_AUTH_NEW       MeshAuth = 1
	MeshAuth_MESH_AUTH_TRUSTED   MeshAuth = 2
	MeshAuth_MESH_AUTH_UNTRUSTED MeshAuth = 3
)

// Enum value maps for MeshAuth.
var (
	MeshAuth_name = map[int32]string{
		0: "MESH_AUTH_UNKNOWN",
		1: "MESH_AUTH_NEW",
		2: "MESH_AUTH_TRUSTED",
		3: "MESH_AUTH_UNTRUSTED",
	}
	MeshAuth_value = map[string]int32{
		"MESH_AUTH_UNKNOWN":   0,
		"MESH_AUTH_NEW":       1,
		"MESH_AUTH_TRUSTED":   2,
		"MESH_AUTH_UNTRUSTED": 3,
	}
)

func (x MeshAuth) Enum() *MeshAuth {
	p := new(MeshAuth)
	*p = x
	return p
}

func (x MeshAuth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MeshAuth) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[0].Descriptor()
}

func (MeshAuth) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[0]
}

func (x MeshAuth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MeshAuth.Descriptor instead.
func (MeshAuth) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{0}
}

type CakeAckFilter int32

const (
	CakeAckFilter_NO_ACK_FILTER         CakeAckFilter = 0
	CakeAckFilter_ACK_FILTER            CakeAckFilter = 1
	CakeAckFilter_ACK_FILTER_AGGRESSIVE CakeAckFilter = 2
)

// Enum value maps for CakeAckFilter.
var (
	CakeAckFilter_name = map[int32]string{
		0: "NO_ACK_FILTER",
		1: "ACK_FILTER",
		2: "ACK_FILTER_AGGRESSIVE",
	}
	CakeAckFilter_value = map[string]int32{
		"NO_ACK_FILTER":         0,
		"ACK_FILTER":            1,
		"ACK_FILTER_AGGRESSIVE": 2,
	}
)

func (x CakeAckFilter) Enum() *CakeAckFilter {
	p := new(CakeAckFilter)
	*p = x
	return p
}

func (x CakeAckFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CakeAckFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[1].Descriptor()
}

func (CakeAckFilter) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[1]
}

func (x CakeAckFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CakeAckFilter.Descriptor instead.
func (CakeAckFilter) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1}
}

type CakePriorityQueueParameter int32

const (
	CakePriorityQueueParameter_DIFFSERV3   CakePriorityQueueParameter = 0
	CakePriorityQueueParameter_DIFFSERV4   CakePriorityQueueParameter = 1
	CakePriorityQueueParameter_PRECEDENCE  CakePriorityQueueParameter = 2
	CakePriorityQueueParameter_BEST_EFFORT CakePriorityQueueParameter = 3
)

// Enum value maps for CakePriorityQueueParameter.
var (
	CakePriorityQueueParameter_name = map[int32]string{
		0: "DIFFSERV3",
		1: "DIFFSERV4",
		2: "PRECEDENCE",
		3: "BEST_EFFORT",
	}
	CakePriorityQueueParameter_value = map[string]int32{
		"DIFFSERV3":   0,
		"DIFFSERV4":   1,
		"PRECEDENCE":  2,
		"BEST_EFFORT": 3,
	}
)

func (x CakePriorityQueueParameter) Enum() *CakePriorityQueueParameter {
	p := new(CakePriorityQueueParameter)
	*p = x
	return p
}

func (x CakePriorityQueueParameter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CakePriorityQueueParameter) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[2].Descriptor()
}

func (CakePriorityQueueParameter) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[2]
}

func (x CakePriorityQueueParameter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CakePriorityQueueParameter.Descriptor instead.
func (CakePriorityQueueParameter) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{2}
}

type WifiConfig_Security int32

const (
	WifiConfig_UNKNOWN  WifiConfig_Security = 0
	WifiConfig_WPA2     WifiConfig_Security = 1
	WifiConfig_WPA3     WifiConfig_Security = 2
	WifiConfig_WPA2WPA3 WifiConfig_Security = 3
)

// Enum value maps for WifiConfig_Security.
var (
	WifiConfig_Security_name = map[int32]string{
		0: "UNKNOWN",
		1: "WPA2",
		2: "WPA3",
		3: "WPA2WPA3",
	}
	WifiConfig_Security_value = map[string]int32{
		"UNKNOWN":  0,
		"WPA2":     1,
		"WPA3":     2,
		"WPA2WPA3": 3,
	}
)

func (x WifiConfig_Security) Enum() *WifiConfig_Security {
	p := new(WifiConfig_Security)
	*p = x
	return p
}

func (x WifiConfig_Security) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiConfig_Security) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[3].Descriptor()
}

func (WifiConfig_Security) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[3]
}

func (x WifiConfig_Security) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiConfig_Security.Descriptor instead.
func (WifiConfig_Security) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4, 0}
}

type WifiConfig_Band int32

const (
	WifiConfig_RF_UNKNOWN   WifiConfig_Band = 0
	WifiConfig_RF_2GHZ      WifiConfig_Band = 2
	WifiConfig_RF_5GHZ      WifiConfig_Band = 5
	WifiConfig_RF_5GHZ_HIGH WifiConfig_Band = 6
)

// Enum value maps for WifiConfig_Band.
var (
	WifiConfig_Band_name = map[int32]string{
		0: "RF_UNKNOWN",
		2: "RF_2GHZ",
		5: "RF_5GHZ",
		6: "RF_5GHZ_HIGH",
	}
	WifiConfig_Band_value = map[string]int32{
		"RF_UNKNOWN":   0,
		"RF_2GHZ":      2,
		"RF_5GHZ":      5,
		"RF_5GHZ_HIGH": 6,
	}
)

func (x WifiConfig_Band) Enum() *WifiConfig_Band {
	p := new(WifiConfig_Band)
	*p = x
	return p
}

func (x WifiConfig_Band) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiConfig_Band) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[4].Descriptor()
}

func (WifiConfig_Band) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[4]
}

func (x WifiConfig_Band) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiConfig_Band.Descriptor instead.
func (WifiConfig_Band) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4, 1}
}

type WifiConfig_WirelessMode int32

const (
	WifiConfig_WIRELESS_MODE_DEFAULT WifiConfig_WirelessMode = 0
	WifiConfig_A_ONLY                WifiConfig_WirelessMode = 1
	WifiConfig_B_ONLY                WifiConfig_WirelessMode = 2
	WifiConfig_G_ONLY                WifiConfig_WirelessMode = 3
	WifiConfig_N_ONLY                WifiConfig_WirelessMode = 4
	WifiConfig_B_G_MIXED             WifiConfig_WirelessMode = 5
	WifiConfig_A_N_MIXED             WifiConfig_WirelessMode = 6
	WifiConfig_G_N_MIXED             WifiConfig_WirelessMode = 7
	WifiConfig_B_G_N_MIXED           WifiConfig_WirelessMode = 8
	WifiConfig_A_AN_AC_MIXED         WifiConfig_WirelessMode = 9
	WifiConfig_AN_AC_MIXED           WifiConfig_WirelessMode = 10
	WifiConfig_B_G_N_AX_MIXED        WifiConfig_WirelessMode = 11
	WifiConfig_A_AN_AC_AX_MIXED      WifiConfig_WirelessMode = 12
)

// Enum value maps for WifiConfig_WirelessMode.
var (
	WifiConfig_WirelessMode_name = map[int32]string{
		0:  "WIRELESS_MODE_DEFAULT",
		1:  "A_ONLY",
		2:  "B_ONLY",
		3:  "G_ONLY",
		4:  "N_ONLY",
		5:  "B_G_MIXED",
		6:  "A_N_MIXED",
		7:  "G_N_MIXED",
		8:  "B_G_N_MIXED",
		9:  "A_AN_AC_MIXED",
		10: "AN_AC_MIXED",
		11: "B_G_N_AX_MIXED",
		12: "A_AN_AC_AX_MIXED",
	}
	WifiConfig_WirelessMode_value = map[string]int32{
		"WIRELESS_MODE_DEFAULT": 0,
		"A_ONLY":                1,
		"B_ONLY":                2,
		"G_ONLY":                3,
		"N_ONLY":                4,
		"B_G_MIXED":             5,
		"A_N_MIXED":             6,
		"G_N_MIXED":             7,
		"B_G_N_MIXED":           8,
		"A_AN_AC_MIXED":         9,
		"AN_AC_MIXED":           10,
		"B_G_N_AX_MIXED":        11,
		"A_AN_AC_AX_MIXED":      12,
	}
)

func (x WifiConfig_WirelessMode) Enum() *WifiConfig_WirelessMode {
	p := new(WifiConfig_WirelessMode)
	*p = x
	return p
}

func (x WifiConfig_WirelessMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiConfig_WirelessMode) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[5].Descriptor()
}

func (WifiConfig_WirelessMode) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[5]
}

func (x WifiConfig_WirelessMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiConfig_WirelessMode.Descriptor instead.
func (WifiConfig_WirelessMode) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4, 2}
}

type WifiConfig_HTBandwidth int32

const (
	WifiConfig_HT_BANDWIDTH_DEFAULT      WifiConfig_HTBandwidth = 0
	WifiConfig_HT_BANDWIDTH_20_MHZ       WifiConfig_HTBandwidth = 1
	WifiConfig_HT_BANDWIDTH_20_OR_40_MHZ WifiConfig_HTBandwidth = 2
)

// Enum value maps for WifiConfig_HTBandwidth.
var (
	WifiConfig_HTBandwidth_name = map[int32]string{
		0: "HT_BANDWIDTH_DEFAULT",
		1: "HT_BANDWIDTH_20_MHZ",
		2: "HT_BANDWIDTH_20_OR_40_MHZ",
	}
	WifiConfig_HTBandwidth_value = map[string]int32{
		"HT_BANDWIDTH_DEFAULT":      0,
		"HT_BANDWIDTH_20_MHZ":       1,
		"HT_BANDWIDTH_20_OR_40_MHZ": 2,
	}
)

func (x WifiConfig_HTBandwidth) Enum() *WifiConfig_HTBandwidth {
	p := new(WifiConfig_HTBandwidth)
	*p = x
	return p
}

func (x WifiConfig_HTBandwidth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiConfig_HTBandwidth) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[6].Descriptor()
}

func (WifiConfig_HTBandwidth) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[6]
}

func (x WifiConfig_HTBandwidth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiConfig_HTBandwidth.Descriptor instead.
func (WifiConfig_HTBandwidth) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4, 3}
}

type WifiConfig_VHTBandwidth int32

const (
	WifiConfig_VHT_BANDWIDTH_DEFAULT        WifiConfig_VHTBandwidth = 0
	WifiConfig_VHT_BANDWIDTH_DISABLED       WifiConfig_VHTBandwidth = 1
	WifiConfig_VHT_BANDWIDTH_80_MHZ         WifiConfig_VHTBandwidth = 2
	WifiConfig_VHT_BANDWIDTH_160_MHZ        WifiConfig_VHTBandwidth = 3
	WifiConfig_VHT_BANDWIDTH_80_PLUS_80_MHZ WifiConfig_VHTBandwidth = 4
)

// Enum value maps for WifiConfig_VHTBandwidth.
var (
	WifiConfig_VHTBandwidth_name = map[int32]string{
		0: "VHT_BANDWIDTH_DEFAULT",
		1: "VHT_BANDWIDTH_DISABLED",
		2: "VHT_BANDWIDTH_80_MHZ",
		3: "VHT_BANDWIDTH_160_MHZ",
		4: "VHT_BANDWIDTH_80_PLUS_80_MHZ",
	}
	WifiConfig_VHTBandwidth_value = map[string]int32{
		"VHT_BANDWIDTH_DEFAULT":        0,
		"VHT_BANDWIDTH_DISABLED":       1,
		"VHT_BANDWIDTH_80_MHZ":         2,
		"VHT_BANDWIDTH_160_MHZ":        3,
		"VHT_BANDWIDTH_80_PLUS_80_MHZ": 4,
	}
)

func (x WifiConfig_VHTBandwidth) Enum() *WifiConfig_VHTBandwidth {
	p := new(WifiConfig_VHTBandwidth)
	*p = x
	return p
}

func (x WifiConfig_VHTBandwidth) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WifiConfig_VHTBandwidth) Descriptor() protoreflect.EnumDescriptor {
	return file_spacex_api_device_wifi_config_proto_enumTypes[7].Descriptor()
}

func (WifiConfig_VHTBandwidth) Type() protoreflect.EnumType {
	return &file_spacex_api_device_wifi_config_proto_enumTypes[7]
}

func (x WifiConfig_VHTBandwidth) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WifiConfig_VHTBandwidth.Descriptor instead.
func (WifiConfig_VHTBandwidth) EnumDescriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4, 4}
}

type MeshConfig struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DisplayName       string                 `protobuf:"bytes,1,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	ApplyDisplayName  bool                   `protobuf:"varint,2,opt,name=apply_display_name,json=applyDisplayName,proto3" json:"apply_display_name,omitempty"`
	Auth              MeshAuth               `protobuf:"varint,3,opt,name=auth,proto3,enum=SpaceX.API.Device.MeshAuth" json:"auth,omitempty"`
	ApplyAuth         bool                   `protobuf:"varint,4,opt,name=apply_auth,json=applyAuth,proto3" json:"apply_auth,omitempty"`
	LastConnected     int64                  `protobuf:"varint,5,opt,name=last_connected,json=lastConnected,proto3" json:"last_connected,omitempty"`
	Incarnation       uint64                 `protobuf:"varint,7,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
	HardwareVersion   string                 `protobuf:"bytes,9,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	Supports_5GhzHigh bool                   `protobuf:"varint,10,opt,name=supports_5ghz_high,json=supports5ghzHigh,proto3" json:"supports_5ghz_high,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MeshConfig) Reset() {
	*x = MeshConfig{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MeshConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeshConfig) ProtoMessage() {}

func (x *MeshConfig) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeshConfig.ProtoReflect.Descriptor instead.
func (*MeshConfig) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{0}
}

func (x *MeshConfig) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *MeshConfig) GetApplyDisplayName() bool {
	if x != nil {
		return x.ApplyDisplayName
	}
	return false
}

func (x *MeshConfig) GetAuth() MeshAuth {
	if x != nil {
		return x.Auth
	}
	return MeshAuth_MESH_AUTH_UNKNOWN
}

func (x *MeshConfig) GetApplyAuth() bool {
	if x != nil {
		return x.ApplyAuth
	}
	return false
}

func (x *MeshConfig) GetLastConnected() int64 {
	if x != nil {
		return x.LastConnected
	}
	return 0
}

func (x *MeshConfig) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

func (x *MeshConfig) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *MeshConfig) GetSupports_5GhzHigh() bool {
	if x != nil {
		return x.Supports_5GhzHigh
	}
	return false
}

type TlsConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           string                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Cert          string                 `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
	ClientCaCert  string                 `protobuf:"bytes,3,opt,name=client_ca_cert,json=clientCaCert,proto3" json:"client_ca_cert,omitempty"`
	ServerCaCert  string                 `protobuf:"bytes,4,opt,name=server_ca_cert,json=serverCaCert,proto3" json:"server_ca_cert,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TlsConfig) Reset() {
	*x = TlsConfig{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TlsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsConfig) ProtoMessage() {}

func (x *TlsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsConfig.ProtoReflect.Descriptor instead.
func (*TlsConfig) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{1}
}

func (x *TlsConfig) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TlsConfig) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *TlsConfig) GetClientCaCert() string {
	if x != nil {
		return x.ClientCaCert
	}
	return ""
}

func (x *TlsConfig) GetServerCaCert() string {
	if x != nil {
		return x.ServerCaCert
	}
	return ""
}

type HttpServer struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	DomainName                string                 `protobuf:"bytes,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	Tls                       *TlsConfig             `protobuf:"bytes,2,opt,name=tls,proto3" json:"tls,omitempty"`
	FileContentId             string                 `protobuf:"bytes,3,opt,name=file_content_id,json=fileContentId,proto3" json:"file_content_id,omitempty"`
	FileContentHash           string                 `protobuf:"bytes,4,opt,name=file_content_hash,json=fileContentHash,proto3" json:"file_content_hash,omitempty"`
	AccessControlAllowOrigins []string               `protobuf:"bytes,5,rep,name=access_control_allow_origins,json=accessControlAllowOrigins,proto3" json:"access_control_allow_origins,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *HttpServer) Reset() {
	*x = HttpServer{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpServer) ProtoMessage() {}

func (x *HttpServer) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpServer.ProtoReflect.Descriptor instead.
func (*HttpServer) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{2}
}

func (x *HttpServer) GetDomainName() string {
	if x != nil {
		return x.DomainName
	}
	return ""
}

func (x *HttpServer) GetTls() *TlsConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *HttpServer) GetFileContentId() string {
	if x != nil {
		return x.FileContentId
	}
	return ""
}

func (x *HttpServer) GetFileContentHash() string {
	if x != nil {
		return x.FileContentHash
	}
	return ""
}

func (x *HttpServer) GetAccessControlAllowOrigins() []string {
	if x != nil {
		return x.AccessControlAllowOrigins
	}
	return nil
}

type CaptivePortal struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Url                     string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	DisplayInCaptiveBrowser bool                   `protobuf:"varint,2,opt,name=display_in_captive_browser,json=displayInCaptiveBrowser,proto3" json:"display_in_captive_browser,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *CaptivePortal) Reset() {
	*x = CaptivePortal{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CaptivePortal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptivePortal) ProtoMessage() {}

func (x *CaptivePortal) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptivePortal.ProtoReflect.Descriptor instead.
func (*CaptivePortal) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{3}
}

func (x *CaptivePortal) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CaptivePortal) GetDisplayInCaptiveBrowser() bool {
	if x != nil {
		return x.DisplayInCaptiveBrowser
	}
	return false
}

type WifiConfig struct {
	state                              protoimpl.MessageState  `protogen:"open.v1"`
	CountryCode                        string                  `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	ApplyCountryCode                   bool                    `protobuf:"varint,1085,opt,name=apply_country_code,json=applyCountryCode,proto3" json:"apply_country_code,omitempty"`
	PinCountryCode                     bool                    `protobuf:"varint,53,opt,name=pin_country_code,json=pinCountryCode,proto3" json:"pin_country_code,omitempty"`
	ApplyPinCountryCode                bool                    `protobuf:"varint,1086,opt,name=apply_pin_country_code,json=applyPinCountryCode,proto3" json:"apply_pin_country_code,omitempty"`
	CustomPowerTable                   bool                    `protobuf:"varint,54,opt,name=custom_power_table,json=customPowerTable,proto3" json:"custom_power_table,omitempty"`
	ApplyCustomPowerTable              bool                    `protobuf:"varint,1087,opt,name=apply_custom_power_table,json=applyCustomPowerTable,proto3" json:"apply_custom_power_table,omitempty"`
	SetupComplete                      bool                    `protobuf:"varint,7,opt,name=setup_complete,json=setupComplete,proto3" json:"setup_complete,omitempty"`
	ApplySetupComplete                 bool                    `protobuf:"varint,1010,opt,name=apply_setup_complete,json=applySetupComplete,proto3" json:"apply_setup_complete,omitempty"`
	Version                            uint32                  `protobuf:"varint,9,opt,name=version,proto3" json:"version,omitempty"`
	MacWan                             string                  `protobuf:"bytes,12,opt,name=mac_wan,json=macWan,proto3" json:"mac_wan,omitempty"`
	MacLan                             string                  `protobuf:"bytes,13,opt,name=mac_lan,json=macLan,proto3" json:"mac_lan,omitempty"`
	Channel_2Ghz                       uint32                  `protobuf:"varint,19,opt,name=channel_2ghz,json=channel2ghz,proto3" json:"channel_2ghz,omitempty"`
	ApplyChannel_2Ghz                  bool                    `protobuf:"varint,1013,opt,name=apply_channel_2ghz,json=applyChannel2ghz,proto3" json:"apply_channel_2ghz,omitempty"`
	Channel_5Ghz                       uint32                  `protobuf:"varint,20,opt,name=channel_5ghz,json=channel5ghz,proto3" json:"channel_5ghz,omitempty"`
	ApplyChannel_5Ghz                  bool                    `protobuf:"varint,1014,opt,name=apply_channel_5ghz,json=applyChannel5ghz,proto3" json:"apply_channel_5ghz,omitempty"`
	Channel_5GhzHigh                   uint32                  `protobuf:"varint,57,opt,name=channel_5ghz_high,json=channel5ghzHigh,proto3" json:"channel_5ghz_high,omitempty"`
	ApplyChannel_5GhzHigh              bool                    `protobuf:"varint,1016,opt,name=apply_channel_5ghz_high,json=applyChannel5ghzHigh,proto3" json:"apply_channel_5ghz_high,omitempty"`
	MeshConfigs                        map[string]*MeshConfig  `protobuf:"bytes,33,rep,name=mesh_configs,json=meshConfigs,proto3" json:"mesh_configs,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MeshConfigsUpdates                 map[string]*MeshConfig  `protobuf:"bytes,3033,rep,name=mesh_configs_updates,json=meshConfigsUpdates,proto3" json:"mesh_configs_updates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ApplyMeshConfigs                   bool                    `protobuf:"varint,1033,opt,name=apply_mesh_configs,json=applyMeshConfigs,proto3" json:"apply_mesh_configs,omitempty"`
	DynamicKeys                        []*PublicKey            `protobuf:"bytes,22,rep,name=dynamic_keys,json=dynamicKeys,proto3" json:"dynamic_keys,omitempty"`
	ApplyDynamicKeys                   bool                    `protobuf:"varint,39,opt,name=apply_dynamic_keys,json=applyDynamicKeys,proto3" json:"apply_dynamic_keys,omitempty"`
	IsRepeater                         bool                    `protobuf:"varint,23,opt,name=is_repeater,json=isRepeater,proto3" json:"is_repeater,omitempty"`
	ApplyIsRepeater                    bool                    `protobuf:"varint,1031,opt,name=apply_is_repeater,json=applyIsRepeater,proto3" json:"apply_is_repeater,omitempty"`
	ApMode                             bool                    `protobuf:"varint,51,opt,name=ap_mode,json=apMode,proto3" json:"ap_mode,omitempty"`
	ApplyApMode                        bool                    `protobuf:"varint,1066,opt,name=apply_ap_mode,json=applyApMode,proto3" json:"apply_ap_mode,omitempty"`
	IsAviation                         bool                    `protobuf:"varint,49,opt,name=is_aviation,json=isAviation,proto3" json:"is_aviation,omitempty"`
	ApplyIsAviation                    bool                    `protobuf:"varint,1064,opt,name=apply_is_aviation,json=applyIsAviation,proto3" json:"apply_is_aviation,omitempty"`
	BootCount                          int32                   `protobuf:"varint,26,opt,name=boot_count,json=bootCount,proto3" json:"boot_count,omitempty"`
	Boot                               *BootInfo               `protobuf:"bytes,3001,opt,name=boot,proto3" json:"boot,omitempty"`
	Nameservers                        []string                `protobuf:"bytes,30,rep,name=nameservers,proto3" json:"nameservers,omitempty"`
	ApplyNameservers                   bool                    `protobuf:"varint,1054,opt,name=apply_nameservers,json=applyNameservers,proto3" json:"apply_nameservers,omitempty"`
	SecureDns                          bool                    `protobuf:"varint,50,opt,name=secure_dns,json=secureDns,proto3" json:"secure_dns,omitempty"`
	ApplySecureDns                     bool                    `protobuf:"varint,1065,opt,name=apply_secure_dns,json=applySecureDns,proto3" json:"apply_secure_dns,omitempty"`
	BypassMode                         bool                    `protobuf:"varint,31,opt,name=bypass_mode,json=bypassMode,proto3" json:"bypass_mode,omitempty"`
	ApplyBypassMode                    bool                    `protobuf:"varint,1055,opt,name=apply_bypass_mode,json=applyBypassMode,proto3" json:"apply_bypass_mode,omitempty"`
	DfsEnabled                         bool                    `protobuf:"varint,42,opt,name=dfs_enabled,json=dfsEnabled,proto3" json:"dfs_enabled,omitempty"`
	ApplyDfsEnabled                    bool                    `protobuf:"varint,1058,opt,name=apply_dfs_enabled,json=applyDfsEnabled,proto3" json:"apply_dfs_enabled,omitempty"`
	DisableMeshOnboarding              bool                    `protobuf:"varint,52,opt,name=disable_mesh_onboarding,json=disableMeshOnboarding,proto3" json:"disable_mesh_onboarding,omitempty"`
	ApplyDisableMeshOnboarding         bool                    `protobuf:"varint,1067,opt,name=apply_disable_mesh_onboarding,json=applyDisableMeshOnboarding,proto3" json:"apply_disable_mesh_onboarding,omitempty"`
	DisableWirelessMeshOnboarding      bool                    `protobuf:"varint,1097,opt,name=disable_wireless_mesh_onboarding,json=disableWirelessMeshOnboarding,proto3" json:"disable_wireless_mesh_onboarding,omitempty"`
	ApplyDisableWirelessMeshOnboarding bool                    `protobuf:"varint,1098,opt,name=apply_disable_wireless_mesh_onboarding,json=applyDisableWirelessMeshOnboarding,proto3" json:"apply_disable_wireless_mesh_onboarding,omitempty"`
	ApplyHttpServer                    bool                    `protobuf:"varint,1107,opt,name=apply_http_server,json=applyHttpServer,proto3" json:"apply_http_server,omitempty"`
	HttpServer                         *HttpServer             `protobuf:"bytes,1108,opt,name=http_server,json=httpServer,proto3" json:"http_server,omitempty"`
	Networks                           []*WifiConfig_Network   `protobuf:"bytes,1100,rep,name=networks,proto3" json:"networks,omitempty"`
	ApplyNetworks                      bool                    `protobuf:"varint,1101,opt,name=apply_networks,json=applyNetworks,proto3" json:"apply_networks,omitempty"`
	Incarnation                        uint64                  `protobuf:"varint,43,opt,name=incarnation,proto3" json:"incarnation,omitempty"`
	WirelessMode_2Ghz                  WifiConfig_WirelessMode `protobuf:"varint,44,opt,name=wireless_mode_2ghz,json=wirelessMode2ghz,proto3,enum=SpaceX.API.Device.WifiConfig_WirelessMode" json:"wireless_mode_2ghz,omitempty"`
	ApplyWirelessMode_2Ghz             bool                    `protobuf:"varint,1059,opt,name=apply_wireless_mode_2ghz,json=applyWirelessMode2ghz,proto3" json:"apply_wireless_mode_2ghz,omitempty"`
	WirelessMode_5Ghz                  WifiConfig_WirelessMode `protobuf:"varint,45,opt,name=wireless_mode_5ghz,json=wirelessMode5ghz,proto3,enum=SpaceX.API.Device.WifiConfig_WirelessMode" json:"wireless_mode_5ghz,omitempty"`
	ApplyWirelessMode_5Ghz             bool                    `protobuf:"varint,1060,opt,name=apply_wireless_mode_5ghz,json=applyWirelessMode5ghz,proto3" json:"apply_wireless_mode_5ghz,omitempty"`
	WirelessMode_5GhzHigh              WifiConfig_WirelessMode `protobuf:"varint,58,opt,name=wireless_mode_5ghz_high,json=wirelessMode5ghzHigh,proto3,enum=SpaceX.API.Device.WifiConfig_WirelessMode" json:"wireless_mode_5ghz_high,omitempty"`
	ApplyWirelessMode_5GhzHigh         bool                    `protobuf:"varint,1070,opt,name=apply_wireless_mode_5ghz_high,json=applyWirelessMode5ghzHigh,proto3" json:"apply_wireless_mode_5ghz_high,omitempty"`
	HtBandwidth_2Ghz                   WifiConfig_HTBandwidth  `protobuf:"varint,46,opt,name=ht_bandwidth_2ghz,json=htBandwidth2ghz,proto3,enum=SpaceX.API.Device.WifiConfig_HTBandwidth" json:"ht_bandwidth_2ghz,omitempty"`
	ApplyHtBandwidth_2Ghz              bool                    `protobuf:"varint,1061,opt,name=apply_ht_bandwidth_2ghz,json=applyHtBandwidth2ghz,proto3" json:"apply_ht_bandwidth_2ghz,omitempty"`
	HtBandwidth_5Ghz                   WifiConfig_HTBandwidth  `protobuf:"varint,47,opt,name=ht_bandwidth_5ghz,json=htBandwidth5ghz,proto3,enum=SpaceX.API.Device.WifiConfig_HTBandwidth" json:"ht_bandwidth_5ghz,omitempty"`
	ApplyHtBandwidth_5Ghz              bool                    `protobuf:"varint,1062,opt,name=apply_ht_bandwidth_5ghz,json=applyHtBandwidth5ghz,proto3" json:"apply_ht_bandwidth_5ghz,omitempty"`
	HtBandwidth_5GhzHigh               WifiConfig_HTBandwidth  `protobuf:"varint,59,opt,name=ht_bandwidth_5ghz_high,json=htBandwidth5ghzHigh,proto3,enum=SpaceX.API.Device.WifiConfig_HTBandwidth" json:"ht_bandwidth_5ghz_high,omitempty"`
	ApplyHtBandwidth_5GhzHigh          bool                    `protobuf:"varint,1071,opt,name=apply_ht_bandwidth_5ghz_high,json=applyHtBandwidth5ghzHigh,proto3" json:"apply_ht_bandwidth_5ghz_high,omitempty"`
	VhtBandwidth                       WifiConfig_VHTBandwidth `protobuf:"varint,48,opt,name=vht_bandwidth,json=vhtBandwidth,proto3,enum=SpaceX.API.Device.WifiConfig_VHTBandwidth" json:"vht_bandwidth,omitempty"`
	ApplyVhtBandwidth                  bool                    `protobuf:"varint,1063,opt,name=apply_vht_bandwidth,json=applyVhtBandwidth,proto3" json:"apply_vht_bandwidth,omitempty"`
	VhtBandwidth_5GhzHigh              WifiConfig_VHTBandwidth `protobuf:"varint,60,opt,name=vht_bandwidth_5ghz_high,json=vhtBandwidth5ghzHigh,proto3,enum=SpaceX.API.Device.WifiConfig_VHTBandwidth" json:"vht_bandwidth_5ghz_high,omitempty"`
	ApplyVhtBandwidth_5GhzHigh         bool                    `protobuf:"varint,1072,opt,name=apply_vht_bandwidth_5ghz_high,json=applyVhtBandwidth5ghzHigh,proto3" json:"apply_vht_bandwidth_5ghz_high,omitempty"`
	UsePublicServices                  bool                    `protobuf:"varint,55,opt,name=use_public_services,json=usePublicServices,proto3" json:"use_public_services,omitempty"`
	ApplyUsePublicServices             bool                    `protobuf:"varint,1068,opt,name=apply_use_public_services,json=applyUsePublicServices,proto3" json:"apply_use_public_services,omitempty"`
	DisableAutomatedSpeedtests         bool                    `protobuf:"varint,56,opt,name=disable_automated_speedtests,json=disableAutomatedSpeedtests,proto3" json:"disable_automated_speedtests,omitempty"`
	ApplyDisableAutomatedSpeedtests    bool                    `protobuf:"varint,1069,opt,name=apply_disable_automated_speedtests,json=applyDisableAutomatedSpeedtests,proto3" json:"apply_disable_automated_speedtests,omitempty"`
	EnableUmbilicalVlan                bool                    `protobuf:"varint,61,opt,name=enable_umbilical_vlan,json=enableUmbilicalVlan,proto3" json:"enable_umbilical_vlan,omitempty"`
	ApplyEnableUmbilicalVlan           bool                    `protobuf:"varint,1073,opt,name=apply_enable_umbilical_vlan,json=applyEnableUmbilicalVlan,proto3" json:"apply_enable_umbilical_vlan,omitempty"`
	// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
	ClientNames []*ClientName `protobuf:"bytes,62,rep,name=client_names,json=clientNames,proto3" json:"client_names,omitempty"`
	// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
	ApplyClientNames          bool `protobuf:"varint,1074,opt,name=apply_client_names,json=applyClientNames,proto3" json:"apply_client_names,omitempty"`
	OutdoorMode               bool `protobuf:"varint,63,opt,name=outdoor_mode,json=outdoorMode,proto3" json:"outdoor_mode,omitempty"`
	ApplyOutdoorMode          bool `protobuf:"varint,1075,opt,name=apply_outdoor_mode,json=applyOutdoorMode,proto3" json:"apply_outdoor_mode,omitempty"`
	Disable_2Ghz              bool `protobuf:"varint,64,opt,name=disable_2ghz,json=disable2ghz,proto3" json:"disable_2ghz,omitempty"`
	ApplyDisable_2Ghz         bool `protobuf:"varint,1076,opt,name=apply_disable_2ghz,json=applyDisable2ghz,proto3" json:"apply_disable_2ghz,omitempty"`
	Disable_5Ghz              bool `protobuf:"varint,65,opt,name=disable_5ghz,json=disable5ghz,proto3" json:"disable_5ghz,omitempty"`
	ApplyDisable_5Ghz         bool `protobuf:"varint,1077,opt,name=apply_disable_5ghz,json=applyDisable5ghz,proto3" json:"apply_disable_5ghz,omitempty"`
	Disable_5GhzHigh          bool `protobuf:"varint,66,opt,name=disable_5ghz_high,json=disable5ghzHigh,proto3" json:"disable_5ghz_high,omitempty"`
	ApplyDisable_5GhzHigh     bool `protobuf:"varint,1078,opt,name=apply_disable_5ghz_high,json=applyDisable5ghzHigh,proto3" json:"apply_disable_5ghz_high,omitempty"`
	DisableXMeshBackhaul      bool `protobuf:"varint,67,opt,name=disable_x_mesh_backhaul,json=disableXMeshBackhaul,proto3" json:"disable_x_mesh_backhaul,omitempty"`
	ApplyDisableXMeshBackhaul bool `protobuf:"varint,1079,opt,name=apply_disable_x_mesh_backhaul,json=applyDisableXMeshBackhaul,proto3" json:"apply_disable_x_mesh_backhaul,omitempty"`
	// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
	GoldenBssid string `protobuf:"bytes,68,opt,name=golden_bssid,json=goldenBssid,proto3" json:"golden_bssid,omitempty"`
	// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
	ApplyGoldenBssid bool `protobuf:"varint,1080,opt,name=apply_golden_bssid,json=applyGoldenBssid,proto3" json:"apply_golden_bssid,omitempty"`
	// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
	GoldenIfaceType IfaceType `protobuf:"varint,69,opt,name=golden_iface_type,json=goldenIfaceType,proto3,enum=SpaceX.API.Device.IfaceType" json:"golden_iface_type,omitempty"`
	// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
	ApplyGoldenIfaceType                    bool            `protobuf:"varint,1081,opt,name=apply_golden_iface_type,json=applyGoldenIfaceType,proto3" json:"apply_golden_iface_type,omitempty"`
	TxPowerLevel_2Ghz                       TxPowerLevel    `protobuf:"varint,70,opt,name=tx_power_level_2ghz,json=txPowerLevel2ghz,proto3,enum=SpaceX.API.Device.TxPowerLevel" json:"tx_power_level_2ghz,omitempty"`
	ApplyTxPowerLevel_2Ghz                  bool            `protobuf:"varint,1082,opt,name=apply_tx_power_level_2ghz,json=applyTxPowerLevel2ghz,proto3" json:"apply_tx_power_level_2ghz,omitempty"`
	TxPowerLevel_5Ghz                       TxPowerLevel    `protobuf:"varint,71,opt,name=tx_power_level_5ghz,json=txPowerLevel5ghz,proto3,enum=SpaceX.API.Device.TxPowerLevel" json:"tx_power_level_5ghz,omitempty"`
	ApplyTxPowerLevel_5Ghz                  bool            `protobuf:"varint,1083,opt,name=apply_tx_power_level_5ghz,json=applyTxPowerLevel5ghz,proto3" json:"apply_tx_power_level_5ghz,omitempty"`
	TxPowerLevel_5GhzHigh                   TxPowerLevel    `protobuf:"varint,72,opt,name=tx_power_level_5ghz_high,json=txPowerLevel5ghzHigh,proto3,enum=SpaceX.API.Device.TxPowerLevel" json:"tx_power_level_5ghz_high,omitempty"`
	ApplyTxPowerLevel_5GhzHigh              bool            `protobuf:"varint,1084,opt,name=apply_tx_power_level_5ghz_high,json=applyTxPowerLevel5ghzHigh,proto3" json:"apply_tx_power_level_5ghz_high,omitempty"`
	DisablePendingUpdateReboot              bool            `protobuf:"varint,73,opt,name=disable_pending_update_reboot,json=disablePendingUpdateReboot,proto3" json:"disable_pending_update_reboot,omitempty"`
	ApplyDisablePendingUpdateReboot         bool            `protobuf:"varint,1088,opt,name=apply_disable_pending_update_reboot,json=applyDisablePendingUpdateReboot,proto3" json:"apply_disable_pending_update_reboot,omitempty"`
	ClientConfigs                           []*ClientConfig `protobuf:"bytes,74,rep,name=client_configs,json=clientConfigs,proto3" json:"client_configs,omitempty"`
	ApplyClientConfigs                      bool            `protobuf:"varint,1089,opt,name=apply_client_configs,json=applyClientConfigs,proto3" json:"apply_client_configs,omitempty"`
	DisableSetWifiConfigFromController      bool            `protobuf:"varint,75,opt,name=disable_set_wifi_config_from_controller,json=disableSetWifiConfigFromController,proto3" json:"disable_set_wifi_config_from_controller,omitempty"`
	ApplyDisableSetWifiConfigFromController bool            `protobuf:"varint,1090,opt,name=apply_disable_set_wifi_config_from_controller,json=applyDisableSetWifiConfigFromController,proto3" json:"apply_disable_set_wifi_config_from_controller,omitempty"`
	ClientKey                               []byte          `protobuf:"bytes,76,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	ApplyClientKey                          bool            `protobuf:"varint,1091,opt,name=apply_client_key,json=applyClientKey,proto3" json:"apply_client_key,omitempty"`
	// Types that are valid to be assigned to WanTrafficControl:
	//
	//	*WifiConfig_WanNoTrafficControl
	//	*WifiConfig_WanAckSuppression
	//	*WifiConfig_WanCakeRateLimit
	WanTrafficControl                   isWifiConfig_WanTrafficControl `protobuf_oneof:"wan_traffic_control"`
	ApplyWanTrafficControl              bool                           `protobuf:"varint,1092,opt,name=apply_wan_traffic_control,json=applyWanTrafficControl,proto3" json:"apply_wan_traffic_control,omitempty"`
	WanHostDscpMark                     int32                          `protobuf:"varint,77,opt,name=wan_host_dscp_mark,json=wanHostDscpMark,proto3" json:"wan_host_dscp_mark,omitempty"`
	ApplyWanHostDscpMark                bool                           `protobuf:"varint,1093,opt,name=apply_wan_host_dscp_mark,json=applyWanHostDscpMark,proto3" json:"apply_wan_host_dscp_mark,omitempty"`
	DebugPopPings                       bool                           `protobuf:"varint,79,opt,name=debug_pop_pings,json=debugPopPings,proto3" json:"debug_pop_pings,omitempty"`
	ApplyDebugPopPings                  bool                           `protobuf:"varint,1095,opt,name=apply_debug_pop_pings,json=applyDebugPopPings,proto3" json:"apply_debug_pop_pings,omitempty"`
	DebugPings                          bool                           `protobuf:"varint,94,opt,name=debug_pings,json=debugPings,proto3" json:"debug_pings,omitempty"`
	ApplyDebugPings                     bool                           `protobuf:"varint,1106,opt,name=apply_debug_pings,json=applyDebugPings,proto3" json:"apply_debug_pings,omitempty"`
	ClientTester                        bool                           `protobuf:"varint,80,opt,name=client_tester,json=clientTester,proto3" json:"client_tester,omitempty"`
	ApplyClientTester                   bool                           `protobuf:"varint,1096,opt,name=apply_client_tester,json=applyClientTester,proto3" json:"apply_client_tester,omitempty"`
	AssetClass                          uint32                         `protobuf:"varint,81,opt,name=asset_class,json=assetClass,proto3" json:"asset_class,omitempty"`
	ApplyAssetClass                     bool                           `protobuf:"varint,1099,opt,name=apply_asset_class,json=applyAssetClass,proto3" json:"apply_asset_class,omitempty"`
	DisableBandSteering                 bool                           `protobuf:"varint,95,opt,name=disable_band_steering,json=disableBandSteering,proto3" json:"disable_band_steering,omitempty"`
	ApplyDisableBandSteering            bool                           `protobuf:"varint,1109,opt,name=apply_disable_band_steering,json=applyDisableBandSteering,proto3" json:"apply_disable_band_steering,omitempty"`
	OnlyOverflightCountries             []string                       `protobuf:"bytes,1110,rep,name=only_overflight_countries,json=onlyOverflightCountries,proto3" json:"only_overflight_countries,omitempty"`
	ApplyOnlyOverflightCountries        bool                           `protobuf:"varint,1111,opt,name=apply_only_overflight_countries,json=applyOnlyOverflightCountries,proto3" json:"apply_only_overflight_countries,omitempty"`
	OnlyOverflightCountriesUsingDefault bool                           `protobuf:"varint,1114,opt,name=only_overflight_countries_using_default,json=onlyOverflightCountriesUsingDefault,proto3" json:"only_overflight_countries_using_default,omitempty"`
	UnbridgedEthPorts                   []*WifiConfig_UnbridgedEthPort `protobuf:"bytes,1112,rep,name=unbridged_eth_ports,json=unbridgedEthPorts,proto3" json:"unbridged_eth_ports,omitempty"`
	ApplyUnbridgedEthPorts              bool                           `protobuf:"varint,1113,opt,name=apply_unbridged_eth_ports,json=applyUnbridgedEthPorts,proto3" json:"apply_unbridged_eth_ports,omitempty"`
	DisableSandboxFailOpen              bool                           `protobuf:"varint,1115,opt,name=disable_sandbox_fail_open,json=disableSandboxFailOpen,proto3" json:"disable_sandbox_fail_open,omitempty"`
	ApplyDisableSandboxFailOpen         bool                           `protobuf:"varint,1116,opt,name=apply_disable_sandbox_fail_open,json=applyDisableSandboxFailOpen,proto3" json:"apply_disable_sandbox_fail_open,omitempty"`
	Tag                                 uint32                         `protobuf:"varint,78,opt,name=tag,proto3" json:"tag,omitempty"`
	CustomDnsDisabled                   bool                           `protobuf:"varint,1117,opt,name=custom_dns_disabled,json=customDnsDisabled,proto3" json:"custom_dns_disabled,omitempty"`
	// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
	ApplyCustomDnsDisabled bool `protobuf:"varint,1118,opt,name=apply_custom_dns_disabled,json=applyCustomDnsDisabled,proto3" json:"apply_custom_dns_disabled,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *WifiConfig) Reset() {
	*x = WifiConfig{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WifiConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig) ProtoMessage() {}

func (x *WifiConfig) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig.ProtoReflect.Descriptor instead.
func (*WifiConfig) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4}
}

func (x *WifiConfig) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *WifiConfig) GetApplyCountryCode() bool {
	if x != nil {
		return x.ApplyCountryCode
	}
	return false
}

func (x *WifiConfig) GetPinCountryCode() bool {
	if x != nil {
		return x.PinCountryCode
	}
	return false
}

func (x *WifiConfig) GetApplyPinCountryCode() bool {
	if x != nil {
		return x.ApplyPinCountryCode
	}
	return false
}

func (x *WifiConfig) GetCustomPowerTable() bool {
	if x != nil {
		return x.CustomPowerTable
	}
	return false
}

func (x *WifiConfig) GetApplyCustomPowerTable() bool {
	if x != nil {
		return x.ApplyCustomPowerTable
	}
	return false
}

func (x *WifiConfig) GetSetupComplete() bool {
	if x != nil {
		return x.SetupComplete
	}
	return false
}

func (x *WifiConfig) GetApplySetupComplete() bool {
	if x != nil {
		return x.ApplySetupComplete
	}
	return false
}

func (x *WifiConfig) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *WifiConfig) GetMacWan() string {
	if x != nil {
		return x.MacWan
	}
	return ""
}

func (x *WifiConfig) GetMacLan() string {
	if x != nil {
		return x.MacLan
	}
	return ""
}

func (x *WifiConfig) GetChannel_2Ghz() uint32 {
	if x != nil {
		return x.Channel_2Ghz
	}
	return 0
}

func (x *WifiConfig) GetApplyChannel_2Ghz() bool {
	if x != nil {
		return x.ApplyChannel_2Ghz
	}
	return false
}

func (x *WifiConfig) GetChannel_5Ghz() uint32 {
	if x != nil {
		return x.Channel_5Ghz
	}
	return 0
}

func (x *WifiConfig) GetApplyChannel_5Ghz() bool {
	if x != nil {
		return x.ApplyChannel_5Ghz
	}
	return false
}

func (x *WifiConfig) GetChannel_5GhzHigh() uint32 {
	if x != nil {
		return x.Channel_5GhzHigh
	}
	return 0
}

func (x *WifiConfig) GetApplyChannel_5GhzHigh() bool {
	if x != nil {
		return x.ApplyChannel_5GhzHigh
	}
	return false
}

func (x *WifiConfig) GetMeshConfigs() map[string]*MeshConfig {
	if x != nil {
		return x.MeshConfigs
	}
	return nil
}

func (x *WifiConfig) GetMeshConfigsUpdates() map[string]*MeshConfig {
	if x != nil {
		return x.MeshConfigsUpdates
	}
	return nil
}

func (x *WifiConfig) GetApplyMeshConfigs() bool {
	if x != nil {
		return x.ApplyMeshConfigs
	}
	return false
}

func (x *WifiConfig) GetDynamicKeys() []*PublicKey {
	if x != nil {
		return x.DynamicKeys
	}
	return nil
}

func (x *WifiConfig) GetApplyDynamicKeys() bool {
	if x != nil {
		return x.ApplyDynamicKeys
	}
	return false
}

func (x *WifiConfig) GetIsRepeater() bool {
	if x != nil {
		return x.IsRepeater
	}
	return false
}

func (x *WifiConfig) GetApplyIsRepeater() bool {
	if x != nil {
		return x.ApplyIsRepeater
	}
	return false
}

func (x *WifiConfig) GetApMode() bool {
	if x != nil {
		return x.ApMode
	}
	return false
}

func (x *WifiConfig) GetApplyApMode() bool {
	if x != nil {
		return x.ApplyApMode
	}
	return false
}

func (x *WifiConfig) GetIsAviation() bool {
	if x != nil {
		return x.IsAviation
	}
	return false
}

func (x *WifiConfig) GetApplyIsAviation() bool {
	if x != nil {
		return x.ApplyIsAviation
	}
	return false
}

func (x *WifiConfig) GetBootCount() int32 {
	if x != nil {
		return x.BootCount
	}
	return 0
}

func (x *WifiConfig) GetBoot() *BootInfo {
	if x != nil {
		return x.Boot
	}
	return nil
}

func (x *WifiConfig) GetNameservers() []string {
	if x != nil {
		return x.Nameservers
	}
	return nil
}

func (x *WifiConfig) GetApplyNameservers() bool {
	if x != nil {
		return x.ApplyNameservers
	}
	return false
}

func (x *WifiConfig) GetSecureDns() bool {
	if x != nil {
		return x.SecureDns
	}
	return false
}

func (x *WifiConfig) GetApplySecureDns() bool {
	if x != nil {
		return x.ApplySecureDns
	}
	return false
}

func (x *WifiConfig) GetBypassMode() bool {
	if x != nil {
		return x.BypassMode
	}
	return false
}

func (x *WifiConfig) GetApplyBypassMode() bool {
	if x != nil {
		return x.ApplyBypassMode
	}
	return false
}

func (x *WifiConfig) GetDfsEnabled() bool {
	if x != nil {
		return x.DfsEnabled
	}
	return false
}

func (x *WifiConfig) GetApplyDfsEnabled() bool {
	if x != nil {
		return x.ApplyDfsEnabled
	}
	return false
}

func (x *WifiConfig) GetDisableMeshOnboarding() bool {
	if x != nil {
		return x.DisableMeshOnboarding
	}
	return false
}

func (x *WifiConfig) GetApplyDisableMeshOnboarding() bool {
	if x != nil {
		return x.ApplyDisableMeshOnboarding
	}
	return false
}

func (x *WifiConfig) GetDisableWirelessMeshOnboarding() bool {
	if x != nil {
		return x.DisableWirelessMeshOnboarding
	}
	return false
}

func (x *WifiConfig) GetApplyDisableWirelessMeshOnboarding() bool {
	if x != nil {
		return x.ApplyDisableWirelessMeshOnboarding
	}
	return false
}

func (x *WifiConfig) GetApplyHttpServer() bool {
	if x != nil {
		return x.ApplyHttpServer
	}
	return false
}

func (x *WifiConfig) GetHttpServer() *HttpServer {
	if x != nil {
		return x.HttpServer
	}
	return nil
}

func (x *WifiConfig) GetNetworks() []*WifiConfig_Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *WifiConfig) GetApplyNetworks() bool {
	if x != nil {
		return x.ApplyNetworks
	}
	return false
}

func (x *WifiConfig) GetIncarnation() uint64 {
	if x != nil {
		return x.Incarnation
	}
	return 0
}

func (x *WifiConfig) GetWirelessMode_2Ghz() WifiConfig_WirelessMode {
	if x != nil {
		return x.WirelessMode_2Ghz
	}
	return WifiConfig_WIRELESS_MODE_DEFAULT
}

func (x *WifiConfig) GetApplyWirelessMode_2Ghz() bool {
	if x != nil {
		return x.ApplyWirelessMode_2Ghz
	}
	return false
}

func (x *WifiConfig) GetWirelessMode_5Ghz() WifiConfig_WirelessMode {
	if x != nil {
		return x.WirelessMode_5Ghz
	}
	return WifiConfig_WIRELESS_MODE_DEFAULT
}

func (x *WifiConfig) GetApplyWirelessMode_5Ghz() bool {
	if x != nil {
		return x.ApplyWirelessMode_5Ghz
	}
	return false
}

func (x *WifiConfig) GetWirelessMode_5GhzHigh() WifiConfig_WirelessMode {
	if x != nil {
		return x.WirelessMode_5GhzHigh
	}
	return WifiConfig_WIRELESS_MODE_DEFAULT
}

func (x *WifiConfig) GetApplyWirelessMode_5GhzHigh() bool {
	if x != nil {
		return x.ApplyWirelessMode_5GhzHigh
	}
	return false
}

func (x *WifiConfig) GetHtBandwidth_2Ghz() WifiConfig_HTBandwidth {
	if x != nil {
		return x.HtBandwidth_2Ghz
	}
	return WifiConfig_HT_BANDWIDTH_DEFAULT
}

func (x *WifiConfig) GetApplyHtBandwidth_2Ghz() bool {
	if x != nil {
		return x.ApplyHtBandwidth_2Ghz
	}
	return false
}

func (x *WifiConfig) GetHtBandwidth_5Ghz() WifiConfig_HTBandwidth {
	if x != nil {
		return x.HtBandwidth_5Ghz
	}
	return WifiConfig_HT_BANDWIDTH_DEFAULT
}

func (x *WifiConfig) GetApplyHtBandwidth_5Ghz() bool {
	if x != nil {
		return x.ApplyHtBandwidth_5Ghz
	}
	return false
}

func (x *WifiConfig) GetHtBandwidth_5GhzHigh() WifiConfig_HTBandwidth {
	if x != nil {
		return x.HtBandwidth_5GhzHigh
	}
	return WifiConfig_HT_BANDWIDTH_DEFAULT
}

func (x *WifiConfig) GetApplyHtBandwidth_5GhzHigh() bool {
	if x != nil {
		return x.ApplyHtBandwidth_5GhzHigh
	}
	return false
}

func (x *WifiConfig) GetVhtBandwidth() WifiConfig_VHTBandwidth {
	if x != nil {
		return x.VhtBandwidth
	}
	return WifiConfig_VHT_BANDWIDTH_DEFAULT
}

func (x *WifiConfig) GetApplyVhtBandwidth() bool {
	if x != nil {
		return x.ApplyVhtBandwidth
	}
	return false
}

func (x *WifiConfig) GetVhtBandwidth_5GhzHigh() WifiConfig_VHTBandwidth {
	if x != nil {
		return x.VhtBandwidth_5GhzHigh
	}
	return WifiConfig_VHT_BANDWIDTH_DEFAULT
}

func (x *WifiConfig) GetApplyVhtBandwidth_5GhzHigh() bool {
	if x != nil {
		return x.ApplyVhtBandwidth_5GhzHigh
	}
	return false
}

func (x *WifiConfig) GetUsePublicServices() bool {
	if x != nil {
		return x.UsePublicServices
	}
	return false
}

func (x *WifiConfig) GetApplyUsePublicServices() bool {
	if x != nil {
		return x.ApplyUsePublicServices
	}
	return false
}

func (x *WifiConfig) GetDisableAutomatedSpeedtests() bool {
	if x != nil {
		return x.DisableAutomatedSpeedtests
	}
	return false
}

func (x *WifiConfig) GetApplyDisableAutomatedSpeedtests() bool {
	if x != nil {
		return x.ApplyDisableAutomatedSpeedtests
	}
	return false
}

func (x *WifiConfig) GetEnableUmbilicalVlan() bool {
	if x != nil {
		return x.EnableUmbilicalVlan
	}
	return false
}

func (x *WifiConfig) GetApplyEnableUmbilicalVlan() bool {
	if x != nil {
		return x.ApplyEnableUmbilicalVlan
	}
	return false
}

// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
func (x *WifiConfig) GetClientNames() []*ClientName {
	if x != nil {
		return x.ClientNames
	}
	return nil
}

// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
func (x *WifiConfig) GetApplyClientNames() bool {
	if x != nil {
		return x.ApplyClientNames
	}
	return false
}

func (x *WifiConfig) GetOutdoorMode() bool {
	if x != nil {
		return x.OutdoorMode
	}
	return false
}

func (x *WifiConfig) GetApplyOutdoorMode() bool {
	if x != nil {
		return x.ApplyOutdoorMode
	}
	return false
}

func (x *WifiConfig) GetDisable_2Ghz() bool {
	if x != nil {
		return x.Disable_2Ghz
	}
	return false
}

func (x *WifiConfig) GetApplyDisable_2Ghz() bool {
	if x != nil {
		return x.ApplyDisable_2Ghz
	}
	return false
}

func (x *WifiConfig) GetDisable_5Ghz() bool {
	if x != nil {
		return x.Disable_5Ghz
	}
	return false
}

func (x *WifiConfig) GetApplyDisable_5Ghz() bool {
	if x != nil {
		return x.ApplyDisable_5Ghz
	}
	return false
}

func (x *WifiConfig) GetDisable_5GhzHigh() bool {
	if x != nil {
		return x.Disable_5GhzHigh
	}
	return false
}

func (x *WifiConfig) GetApplyDisable_5GhzHigh() bool {
	if x != nil {
		return x.ApplyDisable_5GhzHigh
	}
	return false
}

func (x *WifiConfig) GetDisableXMeshBackhaul() bool {
	if x != nil {
		return x.DisableXMeshBackhaul
	}
	return false
}

func (x *WifiConfig) GetApplyDisableXMeshBackhaul() bool {
	if x != nil {
		return x.ApplyDisableXMeshBackhaul
	}
	return false
}

// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
func (x *WifiConfig) GetGoldenBssid() string {
	if x != nil {
		return x.GoldenBssid
	}
	return ""
}

// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
func (x *WifiConfig) GetApplyGoldenBssid() bool {
	if x != nil {
		return x.ApplyGoldenBssid
	}
	return false
}

// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
func (x *WifiConfig) GetGoldenIfaceType() IfaceType {
	if x != nil {
		return x.GoldenIfaceType
	}
	return IfaceType_IFACE_TYPE_UNKNOWN
}

// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
func (x *WifiConfig) GetApplyGoldenIfaceType() bool {
	if x != nil {
		return x.ApplyGoldenIfaceType
	}
	return false
}

func (x *WifiConfig) GetTxPowerLevel_2Ghz() TxPowerLevel {
	if x != nil {
		return x.TxPowerLevel_2Ghz
	}
	return TxPowerLevel_TX_POWER_LEVEL_100
}

func (x *WifiConfig) GetApplyTxPowerLevel_2Ghz() bool {
	if x != nil {
		return x.ApplyTxPowerLevel_2Ghz
	}
	return false
}

func (x *WifiConfig) GetTxPowerLevel_5Ghz() TxPowerLevel {
	if x != nil {
		return x.TxPowerLevel_5Ghz
	}
	return TxPowerLevel_TX_POWER_LEVEL_100
}

func (x *WifiConfig) GetApplyTxPowerLevel_5Ghz() bool {
	if x != nil {
		return x.ApplyTxPowerLevel_5Ghz
	}
	return false
}

func (x *WifiConfig) GetTxPowerLevel_5GhzHigh() TxPowerLevel {
	if x != nil {
		return x.TxPowerLevel_5GhzHigh
	}
	return TxPowerLevel_TX_POWER_LEVEL_100
}

func (x *WifiConfig) GetApplyTxPowerLevel_5GhzHigh() bool {
	if x != nil {
		return x.ApplyTxPowerLevel_5GhzHigh
	}
	return false
}

func (x *WifiConfig) GetDisablePendingUpdateReboot() bool {
	if x != nil {
		return x.DisablePendingUpdateReboot
	}
	return false
}

func (x *WifiConfig) GetApplyDisablePendingUpdateReboot() bool {
	if x != nil {
		return x.ApplyDisablePendingUpdateReboot
	}
	return false
}

func (x *WifiConfig) GetClientConfigs() []*ClientConfig {
	if x != nil {
		return x.ClientConfigs
	}
	return nil
}

func (x *WifiConfig) GetApplyClientConfigs() bool {
	if x != nil {
		return x.ApplyClientConfigs
	}
	return false
}

func (x *WifiConfig) GetDisableSetWifiConfigFromController() bool {
	if x != nil {
		return x.DisableSetWifiConfigFromController
	}
	return false
}

func (x *WifiConfig) GetApplyDisableSetWifiConfigFromController() bool {
	if x != nil {
		return x.ApplyDisableSetWifiConfigFromController
	}
	return false
}

func (x *WifiConfig) GetClientKey() []byte {
	if x != nil {
		return x.ClientKey
	}
	return nil
}

func (x *WifiConfig) GetApplyClientKey() bool {
	if x != nil {
		return x.ApplyClientKey
	}
	return false
}

func (x *WifiConfig) GetWanTrafficControl() isWifiConfig_WanTrafficControl {
	if x != nil {
		return x.WanTrafficControl
	}
	return nil
}

func (x *WifiConfig) GetWanNoTrafficControl() *NoTrafficControl {
	if x != nil {
		if x, ok := x.WanTrafficControl.(*WifiConfig_WanNoTrafficControl); ok {
			return x.WanNoTrafficControl
		}
	}
	return nil
}

func (x *WifiConfig) GetWanAckSuppression() *AckSuppression {
	if x != nil {
		if x, ok := x.WanTrafficControl.(*WifiConfig_WanAckSuppression); ok {
			return x.WanAckSuppression
		}
	}
	return nil
}

func (x *WifiConfig) GetWanCakeRateLimit() *CakeRateLimit {
	if x != nil {
		if x, ok := x.WanTrafficControl.(*WifiConfig_WanCakeRateLimit); ok {
			return x.WanCakeRateLimit
		}
	}
	return nil
}

func (x *WifiConfig) GetApplyWanTrafficControl() bool {
	if x != nil {
		return x.ApplyWanTrafficControl
	}
	return false
}

func (x *WifiConfig) GetWanHostDscpMark() int32 {
	if x != nil {
		return x.WanHostDscpMark
	}
	return 0
}

func (x *WifiConfig) GetApplyWanHostDscpMark() bool {
	if x != nil {
		return x.ApplyWanHostDscpMark
	}
	return false
}

func (x *WifiConfig) GetDebugPopPings() bool {
	if x != nil {
		return x.DebugPopPings
	}
	return false
}

func (x *WifiConfig) GetApplyDebugPopPings() bool {
	if x != nil {
		return x.ApplyDebugPopPings
	}
	return false
}

func (x *WifiConfig) GetDebugPings() bool {
	if x != nil {
		return x.DebugPings
	}
	return false
}

func (x *WifiConfig) GetApplyDebugPings() bool {
	if x != nil {
		return x.ApplyDebugPings
	}
	return false
}

func (x *WifiConfig) GetClientTester() bool {
	if x != nil {
		return x.ClientTester
	}
	return false
}

func (x *WifiConfig) GetApplyClientTester() bool {
	if x != nil {
		return x.ApplyClientTester
	}
	return false
}

func (x *WifiConfig) GetAssetClass() uint32 {
	if x != nil {
		return x.AssetClass
	}
	return 0
}

func (x *WifiConfig) GetApplyAssetClass() bool {
	if x != nil {
		return x.ApplyAssetClass
	}
	return false
}

func (x *WifiConfig) GetDisableBandSteering() bool {
	if x != nil {
		return x.DisableBandSteering
	}
	return false
}

func (x *WifiConfig) GetApplyDisableBandSteering() bool {
	if x != nil {
		return x.ApplyDisableBandSteering
	}
	return false
}

func (x *WifiConfig) GetOnlyOverflightCountries() []string {
	if x != nil {
		return x.OnlyOverflightCountries
	}
	return nil
}

func (x *WifiConfig) GetApplyOnlyOverflightCountries() bool {
	if x != nil {
		return x.ApplyOnlyOverflightCountries
	}
	return false
}

func (x *WifiConfig) GetOnlyOverflightCountriesUsingDefault() bool {
	if x != nil {
		return x.OnlyOverflightCountriesUsingDefault
	}
	return false
}

func (x *WifiConfig) GetUnbridgedEthPorts() []*WifiConfig_UnbridgedEthPort {
	if x != nil {
		return x.UnbridgedEthPorts
	}
	return nil
}

func (x *WifiConfig) GetApplyUnbridgedEthPorts() bool {
	if x != nil {
		return x.ApplyUnbridgedEthPorts
	}
	return false
}

func (x *WifiConfig) GetDisableSandboxFailOpen() bool {
	if x != nil {
		return x.DisableSandboxFailOpen
	}
	return false
}

func (x *WifiConfig) GetApplyDisableSandboxFailOpen() bool {
	if x != nil {
		return x.ApplyDisableSandboxFailOpen
	}
	return false
}

func (x *WifiConfig) GetTag() uint32 {
	if x != nil {
		return x.Tag
	}
	return 0
}

func (x *WifiConfig) GetCustomDnsDisabled() bool {
	if x != nil {
		return x.CustomDnsDisabled
	}
	return false
}

// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
func (x *WifiConfig) GetApplyCustomDnsDisabled() bool {
	if x != nil {
		return x.ApplyCustomDnsDisabled
	}
	return false
}

type isWifiConfig_WanTrafficControl interface {
	isWifiConfig_WanTrafficControl()
}

type WifiConfig_WanNoTrafficControl struct {
	WanNoTrafficControl *NoTrafficControl `protobuf:"bytes,4001,opt,name=wan_no_traffic_control,json=wanNoTrafficControl,proto3,oneof"`
}

type WifiConfig_WanAckSuppression struct {
	WanAckSuppression *AckSuppression `protobuf:"bytes,4002,opt,name=wan_ack_suppression,json=wanAckSuppression,proto3,oneof"`
}

type WifiConfig_WanCakeRateLimit struct {
	WanCakeRateLimit *CakeRateLimit `protobuf:"bytes,4003,opt,name=wan_cake_rate_limit,json=wanCakeRateLimit,proto3,oneof"`
}

func (*WifiConfig_WanNoTrafficControl) isWifiConfig_WanTrafficControl() {}

func (*WifiConfig_WanAckSuppression) isWifiConfig_WanTrafficControl() {}

func (*WifiConfig_WanCakeRateLimit) isWifiConfig_WanTrafficControl() {}

type WanNone struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WanNone) Reset() {
	*x = WanNone{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WanNone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WanNone) ProtoMessage() {}

func (x *WanNone) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WanNone.ProtoReflect.Descriptor instead.
func (*WanNone) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{5}
}

type WanStarlinkRouterPair struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ClientVlanFirst bool                   `protobuf:"varint,1,opt,name=client_vlan_first,json=clientVlanFirst,proto3" json:"client_vlan_first,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WanStarlinkRouterPair) Reset() {
	*x = WanStarlinkRouterPair{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WanStarlinkRouterPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WanStarlinkRouterPair) ProtoMessage() {}

func (x *WanStarlinkRouterPair) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WanStarlinkRouterPair.ProtoReflect.Descriptor instead.
func (*WanStarlinkRouterPair) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{6}
}

func (x *WanStarlinkRouterPair) GetClientVlanFirst() bool {
	if x != nil {
		return x.ClientVlanFirst
	}
	return false
}

type WeeklyBlockSchedule struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	BlockRanges   []*WeeklyBlockSchedule_BlockRange `protobuf:"bytes,1,rep,name=block_ranges,json=blockRanges,proto3" json:"block_ranges,omitempty"`
	GroupId       string                            `protobuf:"bytes,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WeeklyBlockSchedule) Reset() {
	*x = WeeklyBlockSchedule{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeeklyBlockSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklyBlockSchedule) ProtoMessage() {}

func (x *WeeklyBlockSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklyBlockSchedule.ProtoReflect.Descriptor instead.
func (*WeeklyBlockSchedule) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{7}
}

func (x *WeeklyBlockSchedule) GetBlockRanges() []*WeeklyBlockSchedule_BlockRange {
	if x != nil {
		return x.BlockRanges
	}
	return nil
}

func (x *WeeklyBlockSchedule) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type ClientConfig struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	ClientId             uint32                 `protobuf:"varint,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	MacAddress           string                 `protobuf:"bytes,2,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	GivenName            string                 `protobuf:"bytes,3,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	WeeklyBlockSchedules []*WeeklyBlockSchedule `protobuf:"bytes,5,rep,name=weekly_block_schedules,json=weeklyBlockSchedules,proto3" json:"weekly_block_schedules,omitempty"`
	GroupId              string                 `protobuf:"bytes,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ClientConfig) Reset() {
	*x = ClientConfig{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientConfig) ProtoMessage() {}

func (x *ClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientConfig.ProtoReflect.Descriptor instead.
func (*ClientConfig) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{8}
}

func (x *ClientConfig) GetClientId() uint32 {
	if x != nil {
		return x.ClientId
	}
	return 0
}

func (x *ClientConfig) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ClientConfig) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

func (x *ClientConfig) GetWeeklyBlockSchedules() []*WeeklyBlockSchedule {
	if x != nil {
		return x.WeeklyBlockSchedules
	}
	return nil
}

func (x *ClientConfig) GetGroupId() string {
	if x != nil {
		return x.GroupId
	}
	return ""
}

type ClientName struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MacAddress    string                 `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	GivenName     string                 `protobuf:"bytes,2,opt,name=given_name,json=givenName,proto3" json:"given_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClientName) Reset() {
	*x = ClientName{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClientName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientName) ProtoMessage() {}

func (x *ClientName) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientName.ProtoReflect.Descriptor instead.
func (*ClientName) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{9}
}

func (x *ClientName) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *ClientName) GetGivenName() string {
	if x != nil {
		return x.GivenName
	}
	return ""
}

type AuthOpen struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthOpen) Reset() {
	*x = AuthOpen{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthOpen) ProtoMessage() {}

func (x *AuthOpen) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthOpen.ProtoReflect.Descriptor instead.
func (*AuthOpen) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{10}
}

type AuthWpa2 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Password      string                 `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthWpa2) Reset() {
	*x = AuthWpa2{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthWpa2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthWpa2) ProtoMessage() {}

func (x *AuthWpa2) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthWpa2.ProtoReflect.Descriptor instead.
func (*AuthWpa2) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{11}
}

func (x *AuthWpa2) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthWpa3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Password      string                 `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthWpa3) Reset() {
	*x = AuthWpa3{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthWpa3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthWpa3) ProtoMessage() {}

func (x *AuthWpa3) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthWpa3.ProtoReflect.Descriptor instead.
func (*AuthWpa3) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{12}
}

func (x *AuthWpa3) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthWpa2Wpa3 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Password      string                 `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthWpa2Wpa3) Reset() {
	*x = AuthWpa2Wpa3{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthWpa2Wpa3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthWpa2Wpa3) ProtoMessage() {}

func (x *AuthWpa2Wpa3) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthWpa2Wpa3.ProtoReflect.Descriptor instead.
func (*AuthWpa2Wpa3) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{13}
}

func (x *AuthWpa2Wpa3) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type AuthOpenEncrypted struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthOpenEncrypted) Reset() {
	*x = AuthOpenEncrypted{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthOpenEncrypted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthOpenEncrypted) ProtoMessage() {}

func (x *AuthOpenEncrypted) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthOpenEncrypted.ProtoReflect.Descriptor instead.
func (*AuthOpenEncrypted) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{14}
}

type AuthRadius struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Server string                 `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
	ServerCa        string   `protobuf:"bytes,3,opt,name=server_ca,json=serverCa,proto3" json:"server_ca,omitempty"`
	ServerCaBase_64 string   `protobuf:"bytes,4,opt,name=server_ca_base_64,json=serverCaBase64,proto3" json:"server_ca_base_64,omitempty"`
	Password        string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Transport       Protocol `protobuf:"varint,5,opt,name=transport,proto3,enum=SpaceX.API.Device.Protocol" json:"transport,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AuthRadius) Reset() {
	*x = AuthRadius{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthRadius) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthRadius) ProtoMessage() {}

func (x *AuthRadius) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthRadius.ProtoReflect.Descriptor instead.
func (*AuthRadius) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{15}
}

func (x *AuthRadius) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
func (x *AuthRadius) GetServerCa() string {
	if x != nil {
		return x.ServerCa
	}
	return ""
}

func (x *AuthRadius) GetServerCaBase_64() string {
	if x != nil {
		return x.ServerCaBase_64
	}
	return ""
}

func (x *AuthRadius) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *AuthRadius) GetTransport() Protocol {
	if x != nil {
		return x.Transport
	}
	return Protocol_TCP
}

type AuthOnboardRadius struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuthOnboardRadius) Reset() {
	*x = AuthOnboardRadius{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuthOnboardRadius) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthOnboardRadius) ProtoMessage() {}

func (x *AuthOnboardRadius) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthOnboardRadius.ProtoReflect.Descriptor instead.
func (*AuthOnboardRadius) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{16}
}

type NoTrafficControl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoTrafficControl) Reset() {
	*x = NoTrafficControl{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoTrafficControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoTrafficControl) ProtoMessage() {}

func (x *NoTrafficControl) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoTrafficControl.ProtoReflect.Descriptor instead.
func (*NoTrafficControl) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{17}
}

type AckSuppression struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
	AckMark                 uint32  `protobuf:"varint,1,opt,name=ack_mark,json=ackMark,proto3" json:"ack_mark,omitempty"`
	HtbAckQueueRate         float32 `protobuf:"fixed32,2,opt,name=htb_ack_queue_rate,json=htbAckQueueRate,proto3" json:"htb_ack_queue_rate,omitempty"`
	HtbAckQueueCeil         float32 `protobuf:"fixed32,3,opt,name=htb_ack_queue_ceil,json=htbAckQueueCeil,proto3" json:"htb_ack_queue_ceil,omitempty"`
	CakeQueueBandwidth      float32 `protobuf:"fixed32,4,opt,name=cake_queue_bandwidth,json=cakeQueueBandwidth,proto3" json:"cake_queue_bandwidth,omitempty"`
	CakeAckFilterAggressive bool    `protobuf:"varint,5,opt,name=cake_ack_filter_aggressive,json=cakeAckFilterAggressive,proto3" json:"cake_ack_filter_aggressive,omitempty"`
	CakeManualRtt           float32 `protobuf:"fixed32,6,opt,name=cake_manual_rtt,json=cakeManualRtt,proto3" json:"cake_manual_rtt,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *AckSuppression) Reset() {
	*x = AckSuppression{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckSuppression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckSuppression) ProtoMessage() {}

func (x *AckSuppression) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckSuppression.ProtoReflect.Descriptor instead.
func (*AckSuppression) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{18}
}

// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
func (x *AckSuppression) GetAckMark() uint32 {
	if x != nil {
		return x.AckMark
	}
	return 0
}

func (x *AckSuppression) GetHtbAckQueueRate() float32 {
	if x != nil {
		return x.HtbAckQueueRate
	}
	return 0
}

func (x *AckSuppression) GetHtbAckQueueCeil() float32 {
	if x != nil {
		return x.HtbAckQueueCeil
	}
	return 0
}

func (x *AckSuppression) GetCakeQueueBandwidth() float32 {
	if x != nil {
		return x.CakeQueueBandwidth
	}
	return 0
}

func (x *AckSuppression) GetCakeAckFilterAggressive() bool {
	if x != nil {
		return x.CakeAckFilterAggressive
	}
	return false
}

func (x *AckSuppression) GetCakeManualRtt() float32 {
	if x != nil {
		return x.CakeManualRtt
	}
	return 0
}

type CakeRateLimit struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
	HostMark               uint32                     `protobuf:"varint,1,opt,name=host_mark,json=hostMark,proto3" json:"host_mark,omitempty"`
	Bandwidth              float32                    `protobuf:"fixed32,2,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	PriorityQueueParameter CakePriorityQueueParameter `protobuf:"varint,3,opt,name=priority_queue_parameter,json=priorityQueueParameter,proto3,enum=SpaceX.API.Device.CakePriorityQueueParameter" json:"priority_queue_parameter,omitempty"`
	AckFilter              CakeAckFilter              `protobuf:"varint,4,opt,name=ack_filter,json=ackFilter,proto3,enum=SpaceX.API.Device.CakeAckFilter" json:"ack_filter,omitempty"`
	ManualRtt              float32                    `protobuf:"fixed32,6,opt,name=manual_rtt,json=manualRtt,proto3" json:"manual_rtt,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CakeRateLimit) Reset() {
	*x = CakeRateLimit{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeRateLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeRateLimit) ProtoMessage() {}

func (x *CakeRateLimit) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeRateLimit.ProtoReflect.Descriptor instead.
func (*CakeRateLimit) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{19}
}

// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
func (x *CakeRateLimit) GetHostMark() uint32 {
	if x != nil {
		return x.HostMark
	}
	return 0
}

func (x *CakeRateLimit) GetBandwidth() float32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *CakeRateLimit) GetPriorityQueueParameter() CakePriorityQueueParameter {
	if x != nil {
		return x.PriorityQueueParameter
	}
	return CakePriorityQueueParameter_DIFFSERV3
}

func (x *CakeRateLimit) GetAckFilter() CakeAckFilter {
	if x != nil {
		return x.AckFilter
	}
	return CakeAckFilter_NO_ACK_FILTER
}

func (x *CakeRateLimit) GetManualRtt() float32 {
	if x != nil {
		return x.ManualRtt
	}
	return 0
}

type WifiConfig_BasicServiceSet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Bssid string                 `protobuf:"bytes,1003,opt,name=bssid,proto3" json:"bssid,omitempty"`
	Ssid  string                 `protobuf:"bytes,1005,opt,name=ssid,proto3" json:"ssid,omitempty"`
	// Types that are valid to be assigned to Auth:
	//
	//	*WifiConfig_BasicServiceSet_AuthOpen
	//	*WifiConfig_BasicServiceSet_AuthWpa2
	//	*WifiConfig_BasicServiceSet_AuthWpa3
	//	*WifiConfig_BasicServiceSet_AuthWpa2Wpa3
	//	*WifiConfig_BasicServiceSet_AuthRadius
	//	*WifiConfig_BasicServiceSet_AuthOpenEncrypted
	//	*WifiConfig_BasicServiceSet_AuthOnboardRadius
	Auth          isWifiConfig_BasicServiceSet_Auth `protobuf_oneof:"auth"`
	Band          WifiConfig_Band                   `protobuf:"varint,1011,opt,name=band,proto3,enum=SpaceX.API.Device.WifiConfig_Band" json:"band,omitempty"`
	IfaceName     string                            `protobuf:"bytes,1017,opt,name=iface_name,json=ifaceName,proto3" json:"iface_name,omitempty"`
	Disable       bool                              `protobuf:"varint,1013,opt,name=disable,proto3" json:"disable,omitempty"`
	Hidden        bool                              `protobuf:"varint,1015,opt,name=hidden,proto3" json:"hidden,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WifiConfig_BasicServiceSet) Reset() {
	*x = WifiConfig_BasicServiceSet{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WifiConfig_BasicServiceSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig_BasicServiceSet) ProtoMessage() {}

func (x *WifiConfig_BasicServiceSet) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig_BasicServiceSet.ProtoReflect.Descriptor instead.
func (*WifiConfig_BasicServiceSet) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4, 2}
}

func (x *WifiConfig_BasicServiceSet) GetBssid() string {
	if x != nil {
		return x.Bssid
	}
	return ""
}

func (x *WifiConfig_BasicServiceSet) GetSsid() string {
	if x != nil {
		return x.Ssid
	}
	return ""
}

func (x *WifiConfig_BasicServiceSet) GetAuth() isWifiConfig_BasicServiceSet_Auth {
	if x != nil {
		return x.Auth
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthOpen() *AuthOpen {
	if x != nil {
		if x, ok := x.Auth.(*WifiConfig_BasicServiceSet_AuthOpen); ok {
			return x.AuthOpen
		}
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthWpa2() *AuthWpa2 {
	if x != nil {
		if x, ok := x.Auth.(*WifiConfig_BasicServiceSet_AuthWpa2); ok {
			return x.AuthWpa2
		}
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthWpa3() *AuthWpa3 {
	if x != nil {
		if x, ok := x.Auth.(*WifiConfig_BasicServiceSet_AuthWpa3); ok {
			return x.AuthWpa3
		}
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthWpa2Wpa3() *AuthWpa2Wpa3 {
	if x != nil {
		if x, ok := x.Auth.(*WifiConfig_BasicServiceSet_AuthWpa2Wpa3); ok {
			return x.AuthWpa2Wpa3
		}
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthRadius() *AuthRadius {
	if x != nil {
		if x, ok := x.Auth.(*WifiConfig_BasicServiceSet_AuthRadius); ok {
			return x.AuthRadius
		}
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthOpenEncrypted() *AuthOpenEncrypted {
	if x != nil {
		if x, ok := x.Auth.(*WifiConfig_BasicServiceSet_AuthOpenEncrypted); ok {
			return x.AuthOpenEncrypted
		}
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetAuthOnboardRadius() *AuthOnboardRadius {
	if x != nil {
		if x, ok := x.Auth.(*WifiConfig_BasicServiceSet_AuthOnboardRadius); ok {
			return x.AuthOnboardRadius
		}
	}
	return nil
}

func (x *WifiConfig_BasicServiceSet) GetBand() WifiConfig_Band {
	if x != nil {
		return x.Band
	}
	return WifiConfig_RF_UNKNOWN
}

func (x *WifiConfig_BasicServiceSet) GetIfaceName() string {
	if x != nil {
		return x.IfaceName
	}
	return ""
}

func (x *WifiConfig_BasicServiceSet) GetDisable() bool {
	if x != nil {
		return x.Disable
	}
	return false
}

func (x *WifiConfig_BasicServiceSet) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

type isWifiConfig_BasicServiceSet_Auth interface {
	isWifiConfig_BasicServiceSet_Auth()
}

type WifiConfig_BasicServiceSet_AuthOpen struct {
	AuthOpen *AuthOpen `protobuf:"bytes,2001,opt,name=auth_open,json=authOpen,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa2 struct {
	AuthWpa2 *AuthWpa2 `protobuf:"bytes,2002,opt,name=auth_wpa2,json=authWpa2,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa3 struct {
	AuthWpa3 *AuthWpa3 `protobuf:"bytes,2003,opt,name=auth_wpa3,json=authWpa3,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthWpa2Wpa3 struct {
	AuthWpa2Wpa3 *AuthWpa2Wpa3 `protobuf:"bytes,2004,opt,name=auth_wpa2_wpa3,json=authWpa2Wpa3,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthRadius struct {
	AuthRadius *AuthRadius `protobuf:"bytes,2005,opt,name=auth_radius,json=authRadius,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthOpenEncrypted struct {
	AuthOpenEncrypted *AuthOpenEncrypted `protobuf:"bytes,2006,opt,name=auth_open_encrypted,json=authOpenEncrypted,proto3,oneof"`
}

type WifiConfig_BasicServiceSet_AuthOnboardRadius struct {
	AuthOnboardRadius *AuthOnboardRadius `protobuf:"bytes,2007,opt,name=auth_onboard_radius,json=authOnboardRadius,proto3,oneof"`
}

func (*WifiConfig_BasicServiceSet_AuthOpen) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa2) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa3) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthWpa2Wpa3) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthRadius) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthOpenEncrypted) isWifiConfig_BasicServiceSet_Auth() {}

func (*WifiConfig_BasicServiceSet_AuthOnboardRadius) isWifiConfig_BasicServiceSet_Auth() {}

type WifiConfig_DnsStaticEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domains       []string               `protobuf:"bytes,1000,rep,name=domains,proto3" json:"domains,omitempty"`
	Addresses     []string               `protobuf:"bytes,1001,rep,name=addresses,proto3" json:"addresses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WifiConfig_DnsStaticEntry) Reset() {
	*x = WifiConfig_DnsStaticEntry{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WifiConfig_DnsStaticEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig_DnsStaticEntry) ProtoMessage() {}

func (x *WifiConfig_DnsStaticEntry) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig_DnsStaticEntry.ProtoReflect.Descriptor instead.
func (*WifiConfig_DnsStaticEntry) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4, 3}
}

func (x *WifiConfig_DnsStaticEntry) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *WifiConfig_DnsStaticEntry) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type WifiConfig_DnsForwardRule struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Domains         []string               `protobuf:"bytes,1000,rep,name=domains,proto3" json:"domains,omitempty"`
	ServerAddresses []string               `protobuf:"bytes,1001,rep,name=server_addresses,json=serverAddresses,proto3" json:"server_addresses,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *WifiConfig_DnsForwardRule) Reset() {
	*x = WifiConfig_DnsForwardRule{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WifiConfig_DnsForwardRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig_DnsForwardRule) ProtoMessage() {}

func (x *WifiConfig_DnsForwardRule) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig_DnsForwardRule.ProtoReflect.Descriptor instead.
func (*WifiConfig_DnsForwardRule) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4, 4}
}

func (x *WifiConfig_DnsForwardRule) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *WifiConfig_DnsForwardRule) GetServerAddresses() []string {
	if x != nil {
		return x.ServerAddresses
	}
	return nil
}

type WifiConfig_StaticRoute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subnet        string                 `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Gateway       string                 `protobuf:"bytes,2,opt,name=gateway,proto3" json:"gateway,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WifiConfig_StaticRoute) Reset() {
	*x = WifiConfig_StaticRoute{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WifiConfig_StaticRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig_StaticRoute) ProtoMessage() {}

func (x *WifiConfig_StaticRoute) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig_StaticRoute.ProtoReflect.Descriptor instead.
func (*WifiConfig_StaticRoute) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4, 5}
}

func (x *WifiConfig_StaticRoute) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *WifiConfig_StaticRoute) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

type WifiConfig_Network struct {
	state                  protoimpl.MessageState        `protogen:"open.v1"`
	Ipv4                   string                        `protobuf:"bytes,1003,opt,name=ipv4,proto3" json:"ipv4,omitempty"`
	Dhcpv4Start            uint32                        `protobuf:"varint,1012,opt,name=dhcpv4_start,json=dhcpv4Start,proto3" json:"dhcpv4_start,omitempty"`
	Dhcpv4End              uint32                        `protobuf:"varint,1025,opt,name=dhcpv4_end,json=dhcpv4End,proto3" json:"dhcpv4_end,omitempty"`
	DhcpDisabled           bool                          `protobuf:"varint,1015,opt,name=dhcp_disabled,json=dhcpDisabled,proto3" json:"dhcp_disabled,omitempty"`
	Dhcpv4LeaseDurationS   uint32                        `protobuf:"varint,1016,opt,name=dhcpv4_lease_duration_s,json=dhcpv4LeaseDurationS,proto3" json:"dhcpv4_lease_duration_s,omitempty"`
	Domain                 string                        `protobuf:"bytes,1011,opt,name=domain,proto3" json:"domain,omitempty"`
	BasicServiceSets       []*WifiConfig_BasicServiceSet `protobuf:"bytes,1007,rep,name=basic_service_sets,json=basicServiceSets,proto3" json:"basic_service_sets,omitempty"`
	ClientIsolation        bool                          `protobuf:"varint,1008,opt,name=client_isolation,json=clientIsolation,proto3" json:"client_isolation,omitempty"`
	Guest                  bool                          `protobuf:"varint,1009,opt,name=guest,proto3" json:"guest,omitempty"`
	Landing                string                        `protobuf:"bytes,1010,opt,name=landing,proto3" json:"landing,omitempty"`
	LandingPageV2          bool                          `protobuf:"varint,1017,opt,name=landing_page_v2,json=landingPageV2,proto3" json:"landing_page_v2,omitempty"`
	SandboxEnabled         bool                          `protobuf:"varint,1020,opt,name=sandbox_enabled,json=sandboxEnabled,proto3" json:"sandbox_enabled,omitempty"`
	SandboxDomainAllowList []string                      `protobuf:"bytes,1022,rep,name=sandbox_domain_allow_list,json=sandboxDomainAllowList,proto3" json:"sandbox_domain_allow_list,omitempty"`
	SandboxId              uint32                        `protobuf:"varint,1023,opt,name=sandbox_id,json=sandboxId,proto3" json:"sandbox_id,omitempty"`
	Internal               bool                          `protobuf:"varint,1013,opt,name=internal,proto3" json:"internal,omitempty"`
	Vlan                   uint32                        `protobuf:"varint,1014,opt,name=vlan,proto3" json:"vlan,omitempty"`
	CaptivePortal          *CaptivePortal                `protobuf:"bytes,1024,opt,name=captive_portal,json=captivePortal,proto3" json:"captive_portal,omitempty"`
	NetworkGroups          uint32                        `protobuf:"varint,1026,opt,name=network_groups,json=networkGroups,proto3" json:"network_groups,omitempty"`
	DnsStaticEntries       []*WifiConfig_DnsStaticEntry  `protobuf:"bytes,1027,rep,name=dns_static_entries,json=dnsStaticEntries,proto3" json:"dns_static_entries,omitempty"`
	DnsForwardRules        []*WifiConfig_DnsForwardRule  `protobuf:"bytes,1028,rep,name=dns_forward_rules,json=dnsForwardRules,proto3" json:"dns_forward_rules,omitempty"`
	// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
	DisableWhenOfflineOld  bool                      `protobuf:"varint,1029,opt,name=disable_when_offline_old,json=disableWhenOfflineOld,proto3" json:"disable_when_offline_old,omitempty"`
	StaticRoutes           []*WifiConfig_StaticRoute `protobuf:"bytes,1030,rep,name=static_routes,json=staticRoutes,proto3" json:"static_routes,omitempty"`
	DisableWhenOffline     bool                      `protobuf:"varint,1031,opt,name=disable_when_offline,json=disableWhenOffline,proto3" json:"disable_when_offline,omitempty"`
	OnboardRadiusTlsConfig *TlsConfig                `protobuf:"bytes,1032,opt,name=onboard_radius_tls_config,json=onboardRadiusTlsConfig,proto3" json:"onboard_radius_tls_config,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *WifiConfig_Network) Reset() {
	*x = WifiConfig_Network{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WifiConfig_Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig_Network) ProtoMessage() {}

func (x *WifiConfig_Network) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig_Network.ProtoReflect.Descriptor instead.
func (*WifiConfig_Network) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4, 6}
}

func (x *WifiConfig_Network) GetIpv4() string {
	if x != nil {
		return x.Ipv4
	}
	return ""
}

func (x *WifiConfig_Network) GetDhcpv4Start() uint32 {
	if x != nil {
		return x.Dhcpv4Start
	}
	return 0
}

func (x *WifiConfig_Network) GetDhcpv4End() uint32 {
	if x != nil {
		return x.Dhcpv4End
	}
	return 0
}

func (x *WifiConfig_Network) GetDhcpDisabled() bool {
	if x != nil {
		return x.DhcpDisabled
	}
	return false
}

func (x *WifiConfig_Network) GetDhcpv4LeaseDurationS() uint32 {
	if x != nil {
		return x.Dhcpv4LeaseDurationS
	}
	return 0
}

func (x *WifiConfig_Network) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *WifiConfig_Network) GetBasicServiceSets() []*WifiConfig_BasicServiceSet {
	if x != nil {
		return x.BasicServiceSets
	}
	return nil
}

func (x *WifiConfig_Network) GetClientIsolation() bool {
	if x != nil {
		return x.ClientIsolation
	}
	return false
}

func (x *WifiConfig_Network) GetGuest() bool {
	if x != nil {
		return x.Guest
	}
	return false
}

func (x *WifiConfig_Network) GetLanding() string {
	if x != nil {
		return x.Landing
	}
	return ""
}

func (x *WifiConfig_Network) GetLandingPageV2() bool {
	if x != nil {
		return x.LandingPageV2
	}
	return false
}

func (x *WifiConfig_Network) GetSandboxEnabled() bool {
	if x != nil {
		return x.SandboxEnabled
	}
	return false
}

func (x *WifiConfig_Network) GetSandboxDomainAllowList() []string {
	if x != nil {
		return x.SandboxDomainAllowList
	}
	return nil
}

func (x *WifiConfig_Network) GetSandboxId() uint32 {
	if x != nil {
		return x.SandboxId
	}
	return 0
}

func (x *WifiConfig_Network) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *WifiConfig_Network) GetVlan() uint32 {
	if x != nil {
		return x.Vlan
	}
	return 0
}

func (x *WifiConfig_Network) GetCaptivePortal() *CaptivePortal {
	if x != nil {
		return x.CaptivePortal
	}
	return nil
}

func (x *WifiConfig_Network) GetNetworkGroups() uint32 {
	if x != nil {
		return x.NetworkGroups
	}
	return 0
}

func (x *WifiConfig_Network) GetDnsStaticEntries() []*WifiConfig_DnsStaticEntry {
	if x != nil {
		return x.DnsStaticEntries
	}
	return nil
}

func (x *WifiConfig_Network) GetDnsForwardRules() []*WifiConfig_DnsForwardRule {
	if x != nil {
		return x.DnsForwardRules
	}
	return nil
}

// Deprecated: Marked as deprecated in spacex_api/device/wifi_config.proto.
func (x *WifiConfig_Network) GetDisableWhenOfflineOld() bool {
	if x != nil {
		return x.DisableWhenOfflineOld
	}
	return false
}

func (x *WifiConfig_Network) GetStaticRoutes() []*WifiConfig_StaticRoute {
	if x != nil {
		return x.StaticRoutes
	}
	return nil
}

func (x *WifiConfig_Network) GetDisableWhenOffline() bool {
	if x != nil {
		return x.DisableWhenOffline
	}
	return false
}

func (x *WifiConfig_Network) GetOnboardRadiusTlsConfig() *TlsConfig {
	if x != nil {
		return x.OnboardRadiusTlsConfig
	}
	return nil
}

type WifiConfig_UnbridgedEthPort struct {
	state        protoimpl.MessageState                     `protogen:"open.v1"`
	LanPortIndex uint32                                     `protobuf:"varint,1,opt,name=lan_port_index,json=lanPortIndex,proto3" json:"lan_port_index,omitempty"`
	Ip           string                                     `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Gateway      string                                     `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	StaticRoutes []*WifiConfig_UnbridgedEthPort_StaticRoute `protobuf:"bytes,4,rep,name=static_routes,json=staticRoutes,proto3" json:"static_routes,omitempty"`
	// Types that are valid to be assigned to Wan:
	//
	//	*WifiConfig_UnbridgedEthPort_WanNone
	//	*WifiConfig_UnbridgedEthPort_WanStarlinkRouterPair
	Wan           isWifiConfig_UnbridgedEthPort_Wan `protobuf_oneof:"wan"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WifiConfig_UnbridgedEthPort) Reset() {
	*x = WifiConfig_UnbridgedEthPort{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WifiConfig_UnbridgedEthPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig_UnbridgedEthPort) ProtoMessage() {}

func (x *WifiConfig_UnbridgedEthPort) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig_UnbridgedEthPort.ProtoReflect.Descriptor instead.
func (*WifiConfig_UnbridgedEthPort) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4, 7}
}

func (x *WifiConfig_UnbridgedEthPort) GetLanPortIndex() uint32 {
	if x != nil {
		return x.LanPortIndex
	}
	return 0
}

func (x *WifiConfig_UnbridgedEthPort) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *WifiConfig_UnbridgedEthPort) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *WifiConfig_UnbridgedEthPort) GetStaticRoutes() []*WifiConfig_UnbridgedEthPort_StaticRoute {
	if x != nil {
		return x.StaticRoutes
	}
	return nil
}

func (x *WifiConfig_UnbridgedEthPort) GetWan() isWifiConfig_UnbridgedEthPort_Wan {
	if x != nil {
		return x.Wan
	}
	return nil
}

func (x *WifiConfig_UnbridgedEthPort) GetWanNone() *WanNone {
	if x != nil {
		if x, ok := x.Wan.(*WifiConfig_UnbridgedEthPort_WanNone); ok {
			return x.WanNone
		}
	}
	return nil
}

func (x *WifiConfig_UnbridgedEthPort) GetWanStarlinkRouterPair() *WanStarlinkRouterPair {
	if x != nil {
		if x, ok := x.Wan.(*WifiConfig_UnbridgedEthPort_WanStarlinkRouterPair); ok {
			return x.WanStarlinkRouterPair
		}
	}
	return nil
}

type isWifiConfig_UnbridgedEthPort_Wan interface {
	isWifiConfig_UnbridgedEthPort_Wan()
}

type WifiConfig_UnbridgedEthPort_WanNone struct {
	WanNone *WanNone `protobuf:"bytes,5,opt,name=wan_none,json=wanNone,proto3,oneof"`
}

type WifiConfig_UnbridgedEthPort_WanStarlinkRouterPair struct {
	WanStarlinkRouterPair *WanStarlinkRouterPair `protobuf:"bytes,6,opt,name=wan_starlink_router_pair,json=wanStarlinkRouterPair,proto3,oneof"`
}

func (*WifiConfig_UnbridgedEthPort_WanNone) isWifiConfig_UnbridgedEthPort_Wan() {}

func (*WifiConfig_UnbridgedEthPort_WanStarlinkRouterPair) isWifiConfig_UnbridgedEthPort_Wan() {}

type WifiConfig_UnbridgedEthPort_StaticRoute struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subnet        string                 `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	NetworkGroups uint32                 `protobuf:"varint,2,opt,name=network_groups,json=networkGroups,proto3" json:"network_groups,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WifiConfig_UnbridgedEthPort_StaticRoute) Reset() {
	*x = WifiConfig_UnbridgedEthPort_StaticRoute{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WifiConfig_UnbridgedEthPort_StaticRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WifiConfig_UnbridgedEthPort_StaticRoute) ProtoMessage() {}

func (x *WifiConfig_UnbridgedEthPort_StaticRoute) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WifiConfig_UnbridgedEthPort_StaticRoute.ProtoReflect.Descriptor instead.
func (*WifiConfig_UnbridgedEthPort_StaticRoute) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{4, 7, 0}
}

func (x *WifiConfig_UnbridgedEthPort_StaticRoute) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *WifiConfig_UnbridgedEthPort_StaticRoute) GetNetworkGroups() uint32 {
	if x != nil {
		return x.NetworkGroups
	}
	return 0
}

type WeeklyBlockSchedule_BlockRange struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartMinutes  uint32                 `protobuf:"varint,1,opt,name=start_minutes,json=startMinutes,proto3" json:"start_minutes,omitempty"`
	EndMinutes    uint32                 `protobuf:"varint,2,opt,name=end_minutes,json=endMinutes,proto3" json:"end_minutes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WeeklyBlockSchedule_BlockRange) Reset() {
	*x = WeeklyBlockSchedule_BlockRange{}
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WeeklyBlockSchedule_BlockRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklyBlockSchedule_BlockRange) ProtoMessage() {}

func (x *WeeklyBlockSchedule_BlockRange) ProtoReflect() protoreflect.Message {
	mi := &file_spacex_api_device_wifi_config_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklyBlockSchedule_BlockRange.ProtoReflect.Descriptor instead.
func (*WeeklyBlockSchedule_BlockRange) Descriptor() ([]byte, []int) {
	return file_spacex_api_device_wifi_config_proto_rawDescGZIP(), []int{7, 0}
}

func (x *WeeklyBlockSchedule_BlockRange) GetStartMinutes() uint32 {
	if x != nil {
		return x.StartMinutes
	}
	return 0
}

func (x *WeeklyBlockSchedule_BlockRange) GetEndMinutes() uint32 {
	if x != nil {
		return x.EndMinutes
	}
	return 0
}

var File_spacex_api_device_wifi_config_proto protoreflect.FileDescriptor

const file_spacex_api_device_wifi_config_proto_rawDesc = "" +
	"\n" +
	"#spacex_api/device/wifi_config.proto\x12\x11SpaceX.API.Device\x1a\x1fspacex_api/device/command.proto\x1a\x1espacex_api/device/common.proto\x1a!spacex_api/device/wifi_util.proto\"\xdb\x02\n" +
	"\n" +
	"MeshConfig\x12!\n" +
	"\fdisplay_name\x18\x01 \x01(\tR\vdisplayName\x12,\n" +
	"\x12apply_display_name\x18\x02 \x01(\bR\x10applyDisplayName\x12/\n" +
	"\x04auth\x18\x03 \x01(\x0e2\x1b.SpaceX.API.Device.MeshAuthR\x04auth\x12\x1d\n" +
	"\n" +
	"apply_auth\x18\x04 \x01(\bR\tapplyAuth\x12%\n" +
	"\x0elast_connected\x18\x05 \x01(\x03R\rlastConnected\x12 \n" +
	"\vincarnation\x18\a \x01(\x04R\vincarnation\x12)\n" +
	"\x10hardware_version\x18\t \x01(\tR\x0fhardwareVersion\x12,\n" +
	"\x12supports_5ghz_high\x18\n" +
	" \x01(\bR\x10supports5ghzHighJ\x04\b\x06\x10\aJ\x04\b\b\x10\t\"}\n" +
	"\tTlsConfig\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x12\n" +
	"\x04cert\x18\x02 \x01(\tR\x04cert\x12$\n" +
	"\x0eclient_ca_cert\x18\x03 \x01(\tR\fclientCaCert\x12$\n" +
	"\x0eserver_ca_cert\x18\x04 \x01(\tR\fserverCaCert\"\x8a\x02\n" +
	"\n" +
	"HttpServer\x12\x1f\n" +
	"\vdomain_name\x18\x01 \x01(\tR\n" +
	"domainName\x12.\n" +
	"\x03tls\x18\x02 \x01(\v2\x1c.SpaceX.API.Device.TlsConfigR\x03tls\x12&\n" +
	"\x0ffile_content_id\x18\x03 \x01(\tR\rfileContentId\x12*\n" +
	"\x11file_content_hash\x18\x04 \x01(\tR\x0ffileContentHash\x12?\n" +
	"\x1caccess_control_allow_origins\x18\x05 \x03(\tR\x19accessControlAllowOriginsJ\x04\be\x10fR\x10pages_bundle_url\"^\n" +
	"\rCaptivePortal\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12;\n" +
	"\x1adisplay_in_captive_browser\x18\x02 \x01(\bR\x17displayInCaptiveBrowser\"\xcbY\n" +
	"\n" +
	"WifiConfig\x12!\n" +
	"\fcountry_code\x18\x03 \x01(\tR\vcountryCode\x12-\n" +
	"\x12apply_country_code\x18\xbd\b \x01(\bR\x10applyCountryCode\x12(\n" +
	"\x10pin_country_code\x185 \x01(\bR\x0epinCountryCode\x124\n" +
	"\x16apply_pin_country_code\x18\xbe\b \x01(\bR\x13applyPinCountryCode\x12,\n" +
	"\x12custom_power_table\x186 \x01(\bR\x10customPowerTable\x128\n" +
	"\x18apply_custom_power_table\x18\xbf\b \x01(\bR\x15applyCustomPowerTable\x12%\n" +
	"\x0esetup_complete\x18\a \x01(\bR\rsetupComplete\x121\n" +
	"\x14apply_setup_complete\x18\xf2\a \x01(\bR\x12applySetupComplete\x12\x18\n" +
	"\aversion\x18\t \x01(\rR\aversion\x12\x17\n" +
	"\amac_wan\x18\f \x01(\tR\x06macWan\x12\x17\n" +
	"\amac_lan\x18\r \x01(\tR\x06macLan\x12!\n" +
	"\fchannel_2ghz\x18\x13 \x01(\rR\vchannel2ghz\x12-\n" +
	"\x12apply_channel_2ghz\x18\xf5\a \x01(\bR\x10applyChannel2ghz\x12!\n" +
	"\fchannel_5ghz\x18\x14 \x01(\rR\vchannel5ghz\x12-\n" +
	"\x12apply_channel_5ghz\x18\xf6\a \x01(\bR\x10applyChannel5ghz\x12*\n" +
	"\x11channel_5ghz_high\x189 \x01(\rR\x0fchannel5ghzHigh\x126\n" +
	"\x17apply_channel_5ghz_high\x18\xf8\a \x01(\bR\x14applyChannel5ghzHigh\x12Q\n" +
	"\fmesh_configs\x18! \x03(\v2..SpaceX.API.Device.WifiConfig.MeshConfigsEntryR\vmeshConfigs\x12h\n" +
	"\x14mesh_configs_updates\x18\xd9\x17 \x03(\v25.SpaceX.API.Device.WifiConfig.MeshConfigsUpdatesEntryR\x12meshConfigsUpdates\x12-\n" +
	"\x12apply_mesh_configs\x18\x89\b \x01(\bR\x10applyMeshConfigs\x12?\n" +
	"\fdynamic_keys\x18\x16 \x03(\v2\x1c.SpaceX.API.Device.PublicKeyR\vdynamicKeys\x12,\n" +
	"\x12apply_dynamic_keys\x18' \x01(\bR\x10applyDynamicKeys\x12\x1f\n" +
	"\vis_repeater\x18\x17 \x01(\bR\n" +
	"isRepeater\x12+\n" +
	"\x11apply_is_repeater\x18\x87\b \x01(\bR\x0fapplyIsRepeater\x12\x17\n" +
	"\aap_mode\x183 \x01(\bR\x06apMode\x12#\n" +
	"\rapply_ap_mode\x18\xaa\b \x01(\bR\vapplyApMode\x12\x1f\n" +
	"\vis_aviation\x181 \x01(\bR\n" +
	"isAviation\x12+\n" +
	"\x11apply_is_aviation\x18\xa8\b \x01(\bR\x0fapplyIsAviation\x12\x1d\n" +
	"\n" +
	"boot_count\x18\x1a \x01(\x05R\tbootCount\x120\n" +
	"\x04boot\x18\xb9\x17 \x01(\v2\x1b.SpaceX.API.Device.BootInfoR\x04boot\x12 \n" +
	"\vnameservers\x18\x1e \x03(\tR\vnameservers\x12,\n" +
	"\x11apply_nameservers\x18\x9e\b \x01(\bR\x10applyNameservers\x12\x1d\n" +
	"\n" +
	"secure_dns\x182 \x01(\bR\tsecureDns\x12)\n" +
	"\x10apply_secure_dns\x18\xa9\b \x01(\bR\x0eapplySecureDns\x12\x1f\n" +
	"\vbypass_mode\x18\x1f \x01(\bR\n" +
	"bypassMode\x12+\n" +
	"\x11apply_bypass_mode\x18\x9f\b \x01(\bR\x0fapplyBypassMode\x12\x1f\n" +
	"\vdfs_enabled\x18* \x01(\bR\n" +
	"dfsEnabled\x12+\n" +
	"\x11apply_dfs_enabled\x18\xa2\b \x01(\bR\x0fapplyDfsEnabled\x126\n" +
	"\x17disable_mesh_onboarding\x184 \x01(\bR\x15disableMeshOnboarding\x12B\n" +
	"\x1dapply_disable_mesh_onboarding\x18\xab\b \x01(\bR\x1aapplyDisableMeshOnboarding\x12H\n" +
	" disable_wireless_mesh_onboarding\x18\xc9\b \x01(\bR\x1ddisableWirelessMeshOnboarding\x12S\n" +
	"&apply_disable_wireless_mesh_onboarding\x18\xca\b \x01(\bR\"applyDisableWirelessMeshOnboarding\x12+\n" +
	"\x11apply_http_server\x18\xd3\b \x01(\bR\x0fapplyHttpServer\x12?\n" +
	"\vhttp_server\x18\xd4\b \x01(\v2\x1d.SpaceX.API.Device.HttpServerR\n" +
	"httpServer\x12B\n" +
	"\bnetworks\x18\xcc\b \x03(\v2%.SpaceX.API.Device.WifiConfig.NetworkR\bnetworks\x12&\n" +
	"\x0eapply_networks\x18\xcd\b \x01(\bR\rapplyNetworks\x12 \n" +
	"\vincarnation\x18+ \x01(\x04R\vincarnation\x12X\n" +
	"\x12wireless_mode_2ghz\x18, \x01(\x0e2*.SpaceX.API.Device.WifiConfig.WirelessModeR\x10wirelessMode2ghz\x128\n" +
	"\x18apply_wireless_mode_2ghz\x18\xa3\b \x01(\bR\x15applyWirelessMode2ghz\x12X\n" +
	"\x12wireless_mode_5ghz\x18- \x01(\x0e2*.SpaceX.API.Device.WifiConfig.WirelessModeR\x10wirelessMode5ghz\x128\n" +
	"\x18apply_wireless_mode_5ghz\x18\xa4\b \x01(\bR\x15applyWirelessMode5ghz\x12a\n" +
	"\x17wireless_mode_5ghz_high\x18: \x01(\x0e2*.SpaceX.API.Device.WifiConfig.WirelessModeR\x14wirelessMode5ghzHigh\x12A\n" +
	"\x1dapply_wireless_mode_5ghz_high\x18\xae\b \x01(\bR\x19applyWirelessMode5ghzHigh\x12U\n" +
	"\x11ht_bandwidth_2ghz\x18. \x01(\x0e2).SpaceX.API.Device.WifiConfig.HTBandwidthR\x0fhtBandwidth2ghz\x126\n" +
	"\x17apply_ht_bandwidth_2ghz\x18\xa5\b \x01(\bR\x14applyHtBandwidth2ghz\x12U\n" +
	"\x11ht_bandwidth_5ghz\x18/ \x01(\x0e2).SpaceX.API.Device.WifiConfig.HTBandwidthR\x0fhtBandwidth5ghz\x126\n" +
	"\x17apply_ht_bandwidth_5ghz\x18\xa6\b \x01(\bR\x14applyHtBandwidth5ghz\x12^\n" +
	"\x16ht_bandwidth_5ghz_high\x18; \x01(\x0e2).SpaceX.API.Device.WifiConfig.HTBandwidthR\x13htBandwidth5ghzHigh\x12?\n" +
	"\x1capply_ht_bandwidth_5ghz_high\x18\xaf\b \x01(\bR\x18applyHtBandwidth5ghzHigh\x12O\n" +
	"\rvht_bandwidth\x180 \x01(\x0e2*.SpaceX.API.Device.WifiConfig.VHTBandwidthR\fvhtBandwidth\x12/\n" +
	"\x13apply_vht_bandwidth\x18\xa7\b \x01(\bR\x11applyVhtBandwidth\x12a\n" +
	"\x17vht_bandwidth_5ghz_high\x18< \x01(\x0e2*.SpaceX.API.Device.WifiConfig.VHTBandwidthR\x14vhtBandwidth5ghzHigh\x12A\n" +
	"\x1dapply_vht_bandwidth_5ghz_high\x18\xb0\b \x01(\bR\x19applyVhtBandwidth5ghzHigh\x12.\n" +
	"\x13use_public_services\x187 \x01(\bR\x11usePublicServices\x12:\n" +
	"\x19apply_use_public_services\x18\xac\b \x01(\bR\x16applyUsePublicServices\x12@\n" +
	"\x1cdisable_automated_speedtests\x188 \x01(\bR\x1adisableAutomatedSpeedtests\x12L\n" +
	"\"apply_disable_automated_speedtests\x18\xad\b \x01(\bR\x1fapplyDisableAutomatedSpeedtests\x122\n" +
	"\x15enable_umbilical_vlan\x18= \x01(\bR\x13enableUmbilicalVlan\x12>\n" +
	"\x1bapply_enable_umbilical_vlan\x18\xb1\b \x01(\bR\x18applyEnableUmbilicalVlan\x12D\n" +
	"\fclient_names\x18> \x03(\v2\x1d.SpaceX.API.Device.ClientNameB\x02\x18\x01R\vclientNames\x121\n" +
	"\x12apply_client_names\x18\xb2\b \x01(\bB\x02\x18\x01R\x10applyClientNames\x12!\n" +
	"\foutdoor_mode\x18? \x01(\bR\voutdoorMode\x12-\n" +
	"\x12apply_outdoor_mode\x18\xb3\b \x01(\bR\x10applyOutdoorMode\x12!\n" +
	"\fdisable_2ghz\x18@ \x01(\bR\vdisable2ghz\x12-\n" +
	"\x12apply_disable_2ghz\x18\xb4\b \x01(\bR\x10applyDisable2ghz\x12!\n" +
	"\fdisable_5ghz\x18A \x01(\bR\vdisable5ghz\x12-\n" +
	"\x12apply_disable_5ghz\x18\xb5\b \x01(\bR\x10applyDisable5ghz\x12*\n" +
	"\x11disable_5ghz_high\x18B \x01(\bR\x0fdisable5ghzHigh\x126\n" +
	"\x17apply_disable_5ghz_high\x18\xb6\b \x01(\bR\x14applyDisable5ghzHigh\x125\n" +
	"\x17disable_x_mesh_backhaul\x18C \x01(\bR\x14disableXMeshBackhaul\x12A\n" +
	"\x1dapply_disable_x_mesh_backhaul\x18\xb7\b \x01(\bR\x19applyDisableXMeshBackhaul\x12%\n" +
	"\fgolden_bssid\x18D \x01(\tB\x02\x18\x01R\vgoldenBssid\x121\n" +
	"\x12apply_golden_bssid\x18\xb8\b \x01(\bB\x02\x18\x01R\x10applyGoldenBssid\x12L\n" +
	"\x11golden_iface_type\x18E \x01(\x0e2\x1c.SpaceX.API.Device.IfaceTypeB\x02\x18\x01R\x0fgoldenIfaceType\x12:\n" +
	"\x17apply_golden_iface_type\x18\xb9\b \x01(\bB\x02\x18\x01R\x14applyGoldenIfaceType\x12N\n" +
	"\x13tx_power_level_2ghz\x18F \x01(\x0e2\x1f.SpaceX.API.Device.TxPowerLevelR\x10txPowerLevel2ghz\x129\n" +
	"\x19apply_tx_power_level_2ghz\x18\xba\b \x01(\bR\x15applyTxPowerLevel2ghz\x12N\n" +
	"\x13tx_power_level_5ghz\x18G \x01(\x0e2\x1f.SpaceX.API.Device.TxPowerLevelR\x10txPowerLevel5ghz\x129\n" +
	"\x19apply_tx_power_level_5ghz\x18\xbb\b \x01(\bR\x15applyTxPowerLevel5ghz\x12W\n" +
	"\x18tx_power_level_5ghz_high\x18H \x01(\x0e2\x1f.SpaceX.API.Device.TxPowerLevelR\x14txPowerLevel5ghzHigh\x12B\n" +
	"\x1eapply_tx_power_level_5ghz_high\x18\xbc\b \x01(\bR\x19applyTxPowerLevel5ghzHigh\x12A\n" +
	"\x1ddisable_pending_update_reboot\x18I \x01(\bR\x1adisablePendingUpdateReboot\x12M\n" +
	"#apply_disable_pending_update_reboot\x18\xc0\b \x01(\bR\x1fapplyDisablePendingUpdateReboot\x12F\n" +
	"\x0eclient_configs\x18J \x03(\v2\x1f.SpaceX.API.Device.ClientConfigR\rclientConfigs\x121\n" +
	"\x14apply_client_configs\x18\xc1\b \x01(\bR\x12applyClientConfigs\x12S\n" +
	"'disable_set_wifi_config_from_controller\x18K \x01(\bR\"disableSetWifiConfigFromController\x12_\n" +
	"-apply_disable_set_wifi_config_from_controller\x18\xc2\b \x01(\bR'applyDisableSetWifiConfigFromController\x12\x1d\n" +
	"\n" +
	"client_key\x18L \x01(\fR\tclientKey\x12)\n" +
	"\x10apply_client_key\x18\xc3\b \x01(\bR\x0eapplyClientKey\x12[\n" +
	"\x16wan_no_traffic_control\x18\xa1\x1f \x01(\v2#.SpaceX.API.Device.NoTrafficControlH\x00R\x13wanNoTrafficControl\x12T\n" +
	"\x13wan_ack_suppression\x18\xa2\x1f \x01(\v2!.SpaceX.API.Device.AckSuppressionH\x00R\x11wanAckSuppression\x12R\n" +
	"\x13wan_cake_rate_limit\x18\xa3\x1f \x01(\v2 .SpaceX.API.Device.CakeRateLimitH\x00R\x10wanCakeRateLimit\x12:\n" +
	"\x19apply_wan_traffic_control\x18\xc4\b \x01(\bR\x16applyWanTrafficControl\x12+\n" +
	"\x12wan_host_dscp_mark\x18M \x01(\x05R\x0fwanHostDscpMark\x127\n" +
	"\x18apply_wan_host_dscp_mark\x18\xc5\b \x01(\bR\x14applyWanHostDscpMark\x12&\n" +
	"\x0fdebug_pop_pings\x18O \x01(\bR\rdebugPopPings\x122\n" +
	"\x15apply_debug_pop_pings\x18\xc7\b \x01(\bR\x12applyDebugPopPings\x12\x1f\n" +
	"\vdebug_pings\x18^ \x01(\bR\n" +
	"debugPings\x12+\n" +
	"\x11apply_debug_pings\x18\xd2\b \x01(\bR\x0fapplyDebugPings\x12#\n" +
	"\rclient_tester\x18P \x01(\bR\fclientTester\x12/\n" +
	"\x13apply_client_tester\x18\xc8\b \x01(\bR\x11applyClientTester\x12\x1f\n" +
	"\vasset_class\x18Q \x01(\rR\n" +
	"assetClass\x12+\n" +
	"\x11apply_asset_class\x18\xcb\b \x01(\bR\x0fapplyAssetClass\x122\n" +
	"\x15disable_band_steering\x18_ \x01(\bR\x13disableBandSteering\x12>\n" +
	"\x1bapply_disable_band_steering\x18\xd5\b \x01(\bR\x18applyDisableBandSteering\x12;\n" +
	"\x19only_overflight_countries\x18\xd6\b \x03(\tR\x17onlyOverflightCountries\x12F\n" +
	"\x1fapply_only_overflight_countries\x18\xd7\b \x01(\bR\x1capplyOnlyOverflightCountries\x12U\n" +
	"'only_overflight_countries_using_default\x18\xda\b \x01(\bR#onlyOverflightCountriesUsingDefault\x12_\n" +
	"\x13unbridged_eth_ports\x18\xd8\b \x03(\v2..SpaceX.API.Device.WifiConfig.UnbridgedEthPortR\x11unbridgedEthPorts\x12:\n" +
	"\x19apply_unbridged_eth_ports\x18\xd9\b \x01(\bR\x16applyUnbridgedEthPorts\x12:\n" +
	"\x19disable_sandbox_fail_open\x18\xdb\b \x01(\bR\x16disableSandboxFailOpen\x12E\n" +
	"\x1fapply_disable_sandbox_fail_open\x18\xdc\b \x01(\bR\x1bapplyDisableSandboxFailOpen\x12\x10\n" +
	"\x03tag\x18N \x01(\rR\x03tag\x12/\n" +
	"\x13custom_dns_disabled\x18\xdd\b \x01(\bR\x11customDnsDisabled\x12>\n" +
	"\x19apply_custom_dns_disabled\x18\xde\b \x01(\bB\x02\x18\x01R\x16applyCustomDnsDisabled\x1a]\n" +
	"\x10MeshConfigsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x123\n" +
	"\x05value\x18\x02 \x01(\v2\x1d.SpaceX.API.Device.MeshConfigR\x05value:\x028\x01\x1ad\n" +
	"\x17MeshConfigsUpdatesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x123\n" +
	"\x05value\x18\x02 \x01(\v2\x1d.SpaceX.API.Device.MeshConfigR\x05value:\x028\x01\x1a\x90\x06\n" +
	"\x0fBasicServiceSet\x12\x15\n" +
	"\x05bssid\x18\xeb\a \x01(\tR\x05bssid\x12\x13\n" +
	"\x04ssid\x18\xed\a \x01(\tR\x04ssid\x12;\n" +
	"\tauth_open\x18\xd1\x0f \x01(\v2\x1b.SpaceX.API.Device.AuthOpenH\x00R\bauthOpen\x12;\n" +
	"\tauth_wpa2\x18\xd2\x0f \x01(\v2\x1b.SpaceX.API.Device.AuthWpa2H\x00R\bauthWpa2\x12;\n" +
	"\tauth_wpa3\x18\xd3\x0f \x01(\v2\x1b.SpaceX.API.Device.AuthWpa3H\x00R\bauthWpa3\x12H\n" +
	"\x0eauth_wpa2_wpa3\x18\xd4\x0f \x01(\v2\x1f.SpaceX.API.Device.AuthWpa2Wpa3H\x00R\fauthWpa2Wpa3\x12A\n" +
	"\vauth_radius\x18\xd5\x0f \x01(\v2\x1d.SpaceX.API.Device.AuthRadiusH\x00R\n" +
	"authRadius\x12W\n" +
	"\x13auth_open_encrypted\x18\xd6\x0f \x01(\v2$.SpaceX.API.Device.AuthOpenEncryptedH\x00R\x11authOpenEncrypted\x12W\n" +
	"\x13auth_onboard_radius\x18\xd7\x0f \x01(\v2$.SpaceX.API.Device.AuthOnboardRadiusH\x00R\x11authOnboardRadius\x127\n" +
	"\x04band\x18\xf3\a \x01(\x0e2\".SpaceX.API.Device.WifiConfig.BandR\x04band\x12\x1e\n" +
	"\n" +
	"iface_name\x18\xf9\a \x01(\tR\tifaceName\x12\x19\n" +
	"\adisable\x18\xf5\a \x01(\bR\adisable\x12\x17\n" +
	"\x06hidden\x18\xf7\a \x01(\bR\x06hiddenB\x06\n" +
	"\x04authJ\x06\b\xe8\a\x10\xe9\aJ\x06\b\xe9\a\x10\xea\aJ\x06\b\xea\a\x10\xeb\aJ\x06\b\xec\a\x10\xed\aJ\x06\b\xee\a\x10\xef\aJ\x06\b\xd0\x0f\x10\xd1\x0fJ\x06\b\xf4\a\x10\xf5\aJ\x06\b\xf6\a\x10\xf7\aJ\x06\b\xf8\a\x10\xf9\a\x1aJ\n" +
	"\x0eDnsStaticEntry\x12\x19\n" +
	"\adomains\x18\xe8\a \x03(\tR\adomains\x12\x1d\n" +
	"\taddresses\x18\xe9\a \x03(\tR\taddresses\x1aW\n" +
	"\x0eDnsForwardRule\x12\x19\n" +
	"\adomains\x18\xe8\a \x03(\tR\adomains\x12*\n" +
	"\x10server_addresses\x18\xe9\a \x03(\tR\x0fserverAddresses\x1a?\n" +
	"\vStaticRoute\x12\x16\n" +
	"\x06subnet\x18\x01 \x01(\tR\x06subnet\x12\x18\n" +
	"\agateway\x18\x02 \x01(\tR\agateway\x1a\xc2\n" +
	"\n" +
	"\aNetwork\x12\x13\n" +
	"\x04ipv4\x18\xeb\a \x01(\tR\x04ipv4\x12\"\n" +
	"\fdhcpv4_start\x18\xf4\a \x01(\rR\vdhcpv4Start\x12\x1e\n" +
	"\n" +
	"dhcpv4_end\x18\x81\b \x01(\rR\tdhcpv4End\x12$\n" +
	"\rdhcp_disabled\x18\xf7\a \x01(\bR\fdhcpDisabled\x126\n" +
	"\x17dhcpv4_lease_duration_s\x18\xf8\a \x01(\rR\x14dhcpv4LeaseDurationS\x12\x17\n" +
	"\x06domain\x18\xf3\a \x01(\tR\x06domain\x12\\\n" +
	"\x12basic_service_sets\x18\xef\a \x03(\v2-.SpaceX.API.Device.WifiConfig.BasicServiceSetR\x10basicServiceSets\x12*\n" +
	"\x10client_isolation\x18\xf0\a \x01(\bR\x0fclientIsolation\x12\x15\n" +
	"\x05guest\x18\xf1\a \x01(\bR\x05guest\x12\x19\n" +
	"\alanding\x18\xf2\a \x01(\tR\alanding\x12'\n" +
	"\x0flanding_page_v2\x18\xf9\a \x01(\bR\rlandingPageV2\x12(\n" +
	"\x0fsandbox_enabled\x18\xfc\a \x01(\bR\x0esandboxEnabled\x12:\n" +
	"\x19sandbox_domain_allow_list\x18\xfe\a \x03(\tR\x16sandboxDomainAllowList\x12\x1e\n" +
	"\n" +
	"sandbox_id\x18\xff\a \x01(\rR\tsandboxId\x12\x1b\n" +
	"\binternal\x18\xf5\a \x01(\bR\binternal\x12\x13\n" +
	"\x04vlan\x18\xf6\a \x01(\rR\x04vlan\x12H\n" +
	"\x0ecaptive_portal\x18\x80\b \x01(\v2 .SpaceX.API.Device.CaptivePortalR\rcaptivePortal\x12&\n" +
	"\x0enetwork_groups\x18\x82\b \x01(\rR\rnetworkGroups\x12[\n" +
	"\x12dns_static_entries\x18\x83\b \x03(\v2,.SpaceX.API.Device.WifiConfig.DnsStaticEntryR\x10dnsStaticEntries\x12Y\n" +
	"\x11dns_forward_rules\x18\x84\b \x03(\v2,.SpaceX.API.Device.WifiConfig.DnsForwardRuleR\x0fdnsForwardRules\x12<\n" +
	"\x18disable_when_offline_old\x18\x85\b \x01(\bB\x02\x18\x01R\x15disableWhenOfflineOld\x12O\n" +
	"\rstatic_routes\x18\x86\b \x03(\v2).SpaceX.API.Device.WifiConfig.StaticRouteR\fstaticRoutes\x121\n" +
	"\x14disable_when_offline\x18\x87\b \x01(\bR\x12disableWhenOffline\x12X\n" +
	"\x19onboard_radius_tls_config\x18\x88\b \x01(\v2\x1c.SpaceX.API.Device.TlsConfigR\x16onboardRadiusTlsConfigJ\x06\b\xe8\a\x10\xe9\aJ\x06\b\xe9\a\x10\xea\aJ\x06\b\xea\a\x10\xeb\aJ\x06\b\xec\a\x10\xed\aJ\x06\b\xed\a\x10\xee\aJ\x06\b\xee\a\x10\xef\aJ\x06\b\xfa\a\x10\xfb\aJ\x06\b\xfb\a\x10\xfc\aR\x1dclient_authorization_requiredR%unauthorized_client_domain_allow_list\x1a\xb6\x03\n" +
	"\x10UnbridgedEthPort\x12$\n" +
	"\x0elan_port_index\x18\x01 \x01(\rR\flanPortIndex\x12\x0e\n" +
	"\x02ip\x18\x02 \x01(\tR\x02ip\x12\x18\n" +
	"\agateway\x18\x03 \x01(\tR\agateway\x12_\n" +
	"\rstatic_routes\x18\x04 \x03(\v2:.SpaceX.API.Device.WifiConfig.UnbridgedEthPort.StaticRouteR\fstaticRoutes\x127\n" +
	"\bwan_none\x18\x05 \x01(\v2\x1a.SpaceX.API.Device.WanNoneH\x00R\awanNone\x12c\n" +
	"\x18wan_starlink_router_pair\x18\x06 \x01(\v2(.SpaceX.API.Device.WanStarlinkRouterPairH\x00R\x15wanStarlinkRouterPair\x1aL\n" +
	"\vStaticRoute\x12\x16\n" +
	"\x06subnet\x18\x01 \x01(\tR\x06subnet\x12%\n" +
	"\x0enetwork_groups\x18\x02 \x01(\rR\rnetworkGroupsB\x05\n" +
	"\x03wan\"9\n" +
	"\bSecurity\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\b\n" +
	"\x04WPA2\x10\x01\x12\b\n" +
	"\x04WPA3\x10\x02\x12\f\n" +
	"\bWPA2WPA3\x10\x03\"B\n" +
	"\x04Band\x12\x0e\n" +
	"\n" +
	"RF_UNKNOWN\x10\x00\x12\v\n" +
	"\aRF_2GHZ\x10\x02\x12\v\n" +
	"\aRF_5GHZ\x10\x05\x12\x10\n" +
	"\fRF_5GHZ_HIGH\x10\x06\"\xe5\x01\n" +
	"\fWirelessMode\x12\x19\n" +
	"\x15WIRELESS_MODE_DEFAULT\x10\x00\x12\n" +
	"\n" +
	"\x06A_ONLY\x10\x01\x12\n" +
	"\n" +
	"\x06B_ONLY\x10\x02\x12\n" +
	"\n" +
	"\x06G_ONLY\x10\x03\x12\n" +
	"\n" +
	"\x06N_ONLY\x10\x04\x12\r\n" +
	"\tB_G_MIXED\x10\x05\x12\r\n" +
	"\tA_N_MIXED\x10\x06\x12\r\n" +
	"\tG_N_MIXED\x10\a\x12\x0f\n" +
	"\vB_G_N_MIXED\x10\b\x12\x11\n" +
	"\rA_AN_AC_MIXED\x10\t\x12\x0f\n" +
	"\vAN_AC_MIXED\x10\n" +
	"\x12\x12\n" +
	"\x0eB_G_N_AX_MIXED\x10\v\x12\x14\n" +
	"\x10A_AN_AC_AX_MIXED\x10\f\"_\n" +
	"\vHTBandwidth\x12\x18\n" +
	"\x14HT_BANDWIDTH_DEFAULT\x10\x00\x12\x17\n" +
	"\x13HT_BANDWIDTH_20_MHZ\x10\x01\x12\x1d\n" +
	"\x19HT_BANDWIDTH_20_OR_40_MHZ\x10\x02\"\x9c\x01\n" +
	"\fVHTBandwidth\x12\x19\n" +
	"\x15VHT_BANDWIDTH_DEFAULT\x10\x00\x12\x1a\n" +
	"\x16VHT_BANDWIDTH_DISABLED\x10\x01\x12\x18\n" +
	"\x14VHT_BANDWIDTH_80_MHZ\x10\x02\x12\x19\n" +
	"\x15VHT_BANDWIDTH_160_MHZ\x10\x03\x12 \n" +
	"\x1cVHT_BANDWIDTH_80_PLUS_80_MHZ\x10\x04B\x15\n" +
	"\x13wan_traffic_controlJ\x04\b\x01\x10\x02J\x04\b\x02\x10\x03J\x04\b\x04\x10\x05J\x04\b\x05\x10\x06J\x04\b\x06\x10\aJ\x04\b\b\x10\tJ\x04\b\n" +
	"\x10\vJ\x04\b\v\x10\fJ\x04\b\x0e\x10\x0fJ\x04\b\x0f\x10\x10J\x04\b\x10\x10\x11J\x04\b\x11\x10\x12J\x04\b\x12\x10\x13J\x04\b\x15\x10\x16J\x04\b\x18\x10\x19J\x04\b\x19\x10\x1aJ\x04\b\x1b\x10\x1cJ\x04\b\x1c\x10\x1dJ\x04\b\x1d\x10\x1eJ\x04\b \x10!J\x04\b\"\x10#J\x04\b#\x10$J\x04\b$\x10%J\x04\b%\x10&J\x04\b&\x10'J\x04\b(\x10)J\x04\b)\x10*J\x06\b\xe9\a\x10\xea\aJ\x06\b\xea\a\x10\xeb\aJ\x06\b\xeb\a\x10\xec\aJ\x06\b\xec\a\x10\xed\aJ\x06\b\xed\a\x10\xee\aJ\x06\b\xee\a\x10\xef\aJ\x06\b\xef\a\x10\xf0\aJ\x06\b\xf0\a\x10\xf1\aJ\x06\b\xf1\a\x10\xf2\aJ\x06\b\xf3\a\x10\xf4\aJ\x06\b\xf4\a\x10\xf5\aJ\x06\b\xf7\a\x10\xf8\aJ\x06\b\xfd\a\x10\xfe\aJ\x06\b\x91\b\x10\x92\bJ\x06\b\x9b\b\x10\x9c\bJ\x06\b\x9c\b\x10\x9d\bJ\x06\b\x9d\b\x10\x9e\bJ\x06\b\xa0\b\x10\xa1\bJ\x06\b\xa1\b\x10\xa2\bJ\x06\b\xce\b\x10\xcf\bJ\x06\b\xcf\b\x10\xd0\bJ\x06\b\xd0\b\x10\xd1\bJ\x06\b\xd1\b\x10\xd2\bJ\x06\b\xd1\x0f\x10\xd2\x0fJ\x06\b\xd2\x0f\x10\xd3\x0fJ\x06\b\xd3\x0f\x10\xd4\x0fJ\x06\b\xd4\x0f\x10\xd5\x0fJ\x06\b\xd5\x0f\x10\xd6\x0fJ\x06\b\xd6\x0f\x10\xd7\x0fJ\x06\b\xd7\x0f\x10\xd8\x0fJ\x06\b\xd8\x0f\x10\xd9\x0fR\x17apply_enable_remote_sshR\x0eapply_lan_ipv4R\x12apply_network_nameR\x17apply_network_name_5ghzR\x16apply_network_passwordR\x13apply_wifi_securityR\x11enable_remote_sshR\blan_ipv4R\x16last_remote_ssh_accessR\fnetwork_nameR\x11network_name_5ghzR\x10network_passwordR\rwifi_securityR\x14local_landing_domainR\x1aapply_local_landing_domainR\rlocal_landingR\x13apply_local_landing\"\t\n" +
	"\aWanNone\"C\n" +
	"\x15WanStarlinkRouterPair\x12*\n" +
	"\x11client_vlan_first\x18\x01 \x01(\bR\x0fclientVlanFirst\"\xda\x01\n" +
	"\x13WeeklyBlockSchedule\x12T\n" +
	"\fblock_ranges\x18\x01 \x03(\v21.SpaceX.API.Device.WeeklyBlockSchedule.BlockRangeR\vblockRanges\x12\x19\n" +
	"\bgroup_id\x18\x02 \x01(\tR\agroupId\x1aR\n" +
	"\n" +
	"BlockRange\x12#\n" +
	"\rstart_minutes\x18\x01 \x01(\rR\fstartMinutes\x12\x1f\n" +
	"\vend_minutes\x18\x02 \x01(\rR\n" +
	"endMinutes\"\x81\x02\n" +
	"\fClientConfig\x12\x1b\n" +
	"\tclient_id\x18\x01 \x01(\rR\bclientId\x12\x1f\n" +
	"\vmac_address\x18\x02 \x01(\tR\n" +
	"macAddress\x12\x1d\n" +
	"\n" +
	"given_name\x18\x03 \x01(\tR\tgivenName\x12\\\n" +
	"\x16weekly_block_schedules\x18\x05 \x03(\v2&.SpaceX.API.Device.WeeklyBlockScheduleR\x14weeklyBlockSchedules\x12\x19\n" +
	"\bgroup_id\x18\x06 \x01(\tR\agroupIdJ\x04\b\x04\x10\x05R\x15weekly_block_schedule\"L\n" +
	"\n" +
	"ClientName\x12\x1f\n" +
	"\vmac_address\x18\x01 \x01(\tR\n" +
	"macAddress\x12\x1d\n" +
	"\n" +
	"given_name\x18\x02 \x01(\tR\tgivenName\"\n" +
	"\n" +
	"\bAuthOpen\"&\n" +
	"\bAuthWpa2\x12\x1a\n" +
	"\bpassword\x18\x01 \x01(\tR\bpassword\"&\n" +
	"\bAuthWpa3\x12\x1a\n" +
	"\bpassword\x18\x01 \x01(\tR\bpassword\"*\n" +
	"\fAuthWpa2Wpa3\x12\x1a\n" +
	"\bpassword\x18\x01 \x01(\tR\bpassword\"\x13\n" +
	"\x11AuthOpenEncrypted\"\xc7\x01\n" +
	"\n" +
	"AuthRadius\x12\x16\n" +
	"\x06server\x18\x01 \x01(\tR\x06server\x12\x1f\n" +
	"\tserver_ca\x18\x03 \x01(\tB\x02\x18\x01R\bserverCa\x12)\n" +
	"\x11server_ca_base_64\x18\x04 \x01(\tR\x0eserverCaBase64\x12\x1a\n" +
	"\bpassword\x18\x02 \x01(\tR\bpassword\x129\n" +
	"\ttransport\x18\x05 \x01(\x0e2\x1b.SpaceX.API.Device.ProtocolR\ttransport\"\x13\n" +
	"\x11AuthOnboardRadius\"\x12\n" +
	"\x10NoTrafficControl\"\xa0\x02\n" +
	"\x0eAckSuppression\x12\x1d\n" +
	"\back_mark\x18\x01 \x01(\rB\x02\x18\x01R\aackMark\x12+\n" +
	"\x12htb_ack_queue_rate\x18\x02 \x01(\x02R\x0fhtbAckQueueRate\x12+\n" +
	"\x12htb_ack_queue_ceil\x18\x03 \x01(\x02R\x0fhtbAckQueueCeil\x120\n" +
	"\x14cake_queue_bandwidth\x18\x04 \x01(\x02R\x12cakeQueueBandwidth\x12;\n" +
	"\x1acake_ack_filter_aggressive\x18\x05 \x01(\bR\x17cakeAckFilterAggressive\x12&\n" +
	"\x0fcake_manual_rtt\x18\x06 \x01(\x02R\rcakeManualRtt\"\x97\x02\n" +
	"\rCakeRateLimit\x12\x1f\n" +
	"\thost_mark\x18\x01 \x01(\rB\x02\x18\x01R\bhostMark\x12\x1c\n" +
	"\tbandwidth\x18\x02 \x01(\x02R\tbandwidth\x12g\n" +
	"\x18priority_queue_parameter\x18\x03 \x01(\x0e2-.SpaceX.API.Device.CakePriorityQueueParameterR\x16priorityQueueParameter\x12?\n" +
	"\n" +
	"ack_filter\x18\x04 \x01(\x0e2 .SpaceX.API.Device.CakeAckFilterR\tackFilter\x12\x1d\n" +
	"\n" +
	"manual_rtt\x18\x06 \x01(\x02R\tmanualRtt*d\n" +
	"\bMeshAuth\x12\x15\n" +
	"\x11MESH_AUTH_UNKNOWN\x10\x00\x12\x11\n" +
	"\rMESH_AUTH_NEW\x10\x01\x12\x15\n" +
	"\x11MESH_AUTH_TRUSTED\x10\x02\x12\x17\n" +
	"\x13MESH_AUTH_UNTRUSTED\x10\x03*M\n" +
	"\rCakeAckFilter\x12\x11\n" +
	"\rNO_ACK_FILTER\x10\x00\x12\x0e\n" +
	"\n" +
	"ACK_FILTER\x10\x01\x12\x19\n" +
	"\x15ACK_FILTER_AGGRESSIVE\x10\x02*[\n" +
	"\x1aCakePriorityQueueParameter\x12\r\n" +
	"\tDIFFSERV3\x10\x00\x12\r\n" +
	"\tDIFFSERV4\x10\x01\x12\x0e\n" +
	"\n" +
	"PRECEDENCE\x10\x02\x12\x0f\n" +
	"\vBEST_EFFORT\x10\x03B\x17Z\x15spacex.com/api/deviceb\x06proto3"

var (
	file_spacex_api_device_wifi_config_proto_rawDescOnce sync.Once
	file_spacex_api_device_wifi_config_proto_rawDescData []byte
)

func file_spacex_api_device_wifi_config_proto_rawDescGZIP() []byte {
	file_spacex_api_device_wifi_config_proto_rawDescOnce.Do(func() {
		file_spacex_api_device_wifi_config_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_spacex_api_device_wifi_config_proto_rawDesc), len(file_spacex_api_device_wifi_config_proto_rawDesc)))
	})
	return file_spacex_api_device_wifi_config_proto_rawDescData
}

var file_spacex_api_device_wifi_config_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_spacex_api_device_wifi_config_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_spacex_api_device_wifi_config_proto_goTypes = []any{
	(MeshAuth)(0),                                   // 0: SpaceX.API.Device.MeshAuth
	(CakeAckFilter)(0),                              // 1: SpaceX.API.Device.CakeAckFilter
	(CakePriorityQueueParameter)(0),                 // 2: SpaceX.API.Device.CakePriorityQueueParameter
	(WifiConfig_Security)(0),                        // 3: SpaceX.API.Device.WifiConfig.Security
	(WifiConfig_Band)(0),                            // 4: SpaceX.API.Device.WifiConfig.Band
	(WifiConfig_WirelessMode)(0),                    // 5: SpaceX.API.Device.WifiConfig.WirelessMode
	(WifiConfig_HTBandwidth)(0),                     // 6: SpaceX.API.Device.WifiConfig.HTBandwidth
	(WifiConfig_VHTBandwidth)(0),                    // 7: SpaceX.API.Device.WifiConfig.VHTBandwidth
	(*MeshConfig)(nil),                              // 8: SpaceX.API.Device.MeshConfig
	(*TlsConfig)(nil),                               // 9: SpaceX.API.Device.TlsConfig
	(*HttpServer)(nil),                              // 10: SpaceX.API.Device.HttpServer
	(*CaptivePortal)(nil),                           // 11: SpaceX.API.Device.CaptivePortal
	(*WifiConfig)(nil),                              // 12: SpaceX.API.Device.WifiConfig
	(*WanNone)(nil),                                 // 13: SpaceX.API.Device.WanNone
	(*WanStarlinkRouterPair)(nil),                   // 14: SpaceX.API.Device.WanStarlinkRouterPair
	(*WeeklyBlockSchedule)(nil),                     // 15: SpaceX.API.Device.WeeklyBlockSchedule
	(*ClientConfig)(nil),                            // 16: SpaceX.API.Device.ClientConfig
	(*ClientName)(nil),                              // 17: SpaceX.API.Device.ClientName
	(*AuthOpen)(nil),                                // 18: SpaceX.API.Device.AuthOpen
	(*AuthWpa2)(nil),                                // 19: SpaceX.API.Device.AuthWpa2
	(*AuthWpa3)(nil),                                // 20: SpaceX.API.Device.AuthWpa3
	(*AuthWpa2Wpa3)(nil),                            // 21: SpaceX.API.Device.AuthWpa2Wpa3
	(*AuthOpenEncrypted)(nil),                       // 22: SpaceX.API.Device.AuthOpenEncrypted
	(*AuthRadius)(nil),                              // 23: SpaceX.API.Device.AuthRadius
	(*AuthOnboardRadius)(nil),                       // 24: SpaceX.API.Device.AuthOnboardRadius
	(*NoTrafficControl)(nil),                        // 25: SpaceX.API.Device.NoTrafficControl
	(*AckSuppression)(nil),                          // 26: SpaceX.API.Device.AckSuppression
	(*CakeRateLimit)(nil),                           // 27: SpaceX.API.Device.CakeRateLimit
	nil,                                             // 28: SpaceX.API.Device.WifiConfig.MeshConfigsEntry
	nil,                                             // 29: SpaceX.API.Device.WifiConfig.MeshConfigsUpdatesEntry
	(*WifiConfig_BasicServiceSet)(nil),              // 30: SpaceX.API.Device.WifiConfig.BasicServiceSet
	(*WifiConfig_DnsStaticEntry)(nil),               // 31: SpaceX.API.Device.WifiConfig.DnsStaticEntry
	(*WifiConfig_DnsForwardRule)(nil),               // 32: SpaceX.API.Device.WifiConfig.DnsForwardRule
	(*WifiConfig_StaticRoute)(nil),                  // 33: SpaceX.API.Device.WifiConfig.StaticRoute
	(*WifiConfig_Network)(nil),                      // 34: SpaceX.API.Device.WifiConfig.Network
	(*WifiConfig_UnbridgedEthPort)(nil),             // 35: SpaceX.API.Device.WifiConfig.UnbridgedEthPort
	(*WifiConfig_UnbridgedEthPort_StaticRoute)(nil), // 36: SpaceX.API.Device.WifiConfig.UnbridgedEthPort.StaticRoute
	(*WeeklyBlockSchedule_BlockRange)(nil),          // 37: SpaceX.API.Device.WeeklyBlockSchedule.BlockRange
	(*PublicKey)(nil),                               // 38: SpaceX.API.Device.PublicKey
	(*BootInfo)(nil),                                // 39: SpaceX.API.Device.BootInfo
	(IfaceType)(0),                                  // 40: SpaceX.API.Device.IfaceType
	(TxPowerLevel)(0),                               // 41: SpaceX.API.Device.TxPowerLevel
	(Protocol)(0),                                   // 42: SpaceX.API.Device.Protocol
}
var file_spacex_api_device_wifi_config_proto_depIdxs = []int32{
	0,  // 0: SpaceX.API.Device.MeshConfig.auth:type_name -> SpaceX.API.Device.MeshAuth
	9,  // 1: SpaceX.API.Device.HttpServer.tls:type_name -> SpaceX.API.Device.TlsConfig
	28, // 2: SpaceX.API.Device.WifiConfig.mesh_configs:type_name -> SpaceX.API.Device.WifiConfig.MeshConfigsEntry
	29, // 3: SpaceX.API.Device.WifiConfig.mesh_configs_updates:type_name -> SpaceX.API.Device.WifiConfig.MeshConfigsUpdatesEntry
	38, // 4: SpaceX.API.Device.WifiConfig.dynamic_keys:type_name -> SpaceX.API.Device.PublicKey
	39, // 5: SpaceX.API.Device.WifiConfig.boot:type_name -> SpaceX.API.Device.BootInfo
	10, // 6: SpaceX.API.Device.WifiConfig.http_server:type_name -> SpaceX.API.Device.HttpServer
	34, // 7: SpaceX.API.Device.WifiConfig.networks:type_name -> SpaceX.API.Device.WifiConfig.Network
	5,  // 8: SpaceX.API.Device.WifiConfig.wireless_mode_2ghz:type_name -> SpaceX.API.Device.WifiConfig.WirelessMode
	5,  // 9: SpaceX.API.Device.WifiConfig.wireless_mode_5ghz:type_name -> SpaceX.API.Device.WifiConfig.WirelessMode
	5,  // 10: SpaceX.API.Device.WifiConfig.wireless_mode_5ghz_high:type_name -> SpaceX.API.Device.WifiConfig.WirelessMode
	6,  // 11: SpaceX.API.Device.WifiConfig.ht_bandwidth_2ghz:type_name -> SpaceX.API.Device.WifiConfig.HTBandwidth
	6,  // 12: SpaceX.API.Device.WifiConfig.ht_bandwidth_5ghz:type_name -> SpaceX.API.Device.WifiConfig.HTBandwidth
	6,  // 13: SpaceX.API.Device.WifiConfig.ht_bandwidth_5ghz_high:type_name -> SpaceX.API.Device.WifiConfig.HTBandwidth
	7,  // 14: SpaceX.API.Device.WifiConfig.vht_bandwidth:type_name -> SpaceX.API.Device.WifiConfig.VHTBandwidth
	7,  // 15: SpaceX.API.Device.WifiConfig.vht_bandwidth_5ghz_high:type_name -> SpaceX.API.Device.WifiConfig.VHTBandwidth
	17, // 16: SpaceX.API.Device.WifiConfig.client_names:type_name -> SpaceX.API.Device.ClientName
	40, // 17: SpaceX.API.Device.WifiConfig.golden_iface_type:type_name -> SpaceX.API.Device.IfaceType
	41, // 18: SpaceX.API.Device.WifiConfig.tx_power_level_2ghz:type_name -> SpaceX.API.Device.TxPowerLevel
	41, // 19: SpaceX.API.Device.WifiConfig.tx_power_level_5ghz:type_name -> SpaceX.API.Device.TxPowerLevel
	41, // 20: SpaceX.API.Device.WifiConfig.tx_power_level_5ghz_high:type_name -> SpaceX.API.Device.TxPowerLevel
	16, // 21: SpaceX.API.Device.WifiConfig.client_configs:type_name -> SpaceX.API.Device.ClientConfig
	25, // 22: SpaceX.API.Device.WifiConfig.wan_no_traffic_control:type_name -> SpaceX.API.Device.NoTrafficControl
	26, // 23: SpaceX.API.Device.WifiConfig.wan_ack_suppression:type_name -> SpaceX.API.Device.AckSuppression
	27, // 24: SpaceX.API.Device.WifiConfig.wan_cake_rate_limit:type_name -> SpaceX.API.Device.CakeRateLimit
	35, // 25: SpaceX.API.Device.WifiConfig.unbridged_eth_ports:type_name -> SpaceX.API.Device.WifiConfig.UnbridgedEthPort
	37, // 26: SpaceX.API.Device.WeeklyBlockSchedule.block_ranges:type_name -> SpaceX.API.Device.WeeklyBlockSchedule.BlockRange
	15, // 27: SpaceX.API.Device.ClientConfig.weekly_block_schedules:type_name -> SpaceX.API.Device.WeeklyBlockSchedule
	42, // 28: SpaceX.API.Device.AuthRadius.transport:type_name -> SpaceX.API.Device.Protocol
	2,  // 29: SpaceX.API.Device.CakeRateLimit.priority_queue_parameter:type_name -> SpaceX.API.Device.CakePriorityQueueParameter
	1,  // 30: SpaceX.API.Device.CakeRateLimit.ack_filter:type_name -> SpaceX.API.Device.CakeAckFilter
	8,  // 31: SpaceX.API.Device.WifiConfig.MeshConfigsEntry.value:type_name -> SpaceX.API.Device.MeshConfig
	8,  // 32: SpaceX.API.Device.WifiConfig.MeshConfigsUpdatesEntry.value:type_name -> SpaceX.API.Device.MeshConfig
	18, // 33: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_open:type_name -> SpaceX.API.Device.AuthOpen
	19, // 34: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_wpa2:type_name -> SpaceX.API.Device.AuthWpa2
	20, // 35: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_wpa3:type_name -> SpaceX.API.Device.AuthWpa3
	21, // 36: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_wpa2_wpa3:type_name -> SpaceX.API.Device.AuthWpa2Wpa3
	23, // 37: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_radius:type_name -> SpaceX.API.Device.AuthRadius
	22, // 38: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_open_encrypted:type_name -> SpaceX.API.Device.AuthOpenEncrypted
	24, // 39: SpaceX.API.Device.WifiConfig.BasicServiceSet.auth_onboard_radius:type_name -> SpaceX.API.Device.AuthOnboardRadius
	4,  // 40: SpaceX.API.Device.WifiConfig.BasicServiceSet.band:type_name -> SpaceX.API.Device.WifiConfig.Band
	30, // 41: SpaceX.API.Device.WifiConfig.Network.basic_service_sets:type_name -> SpaceX.API.Device.WifiConfig.BasicServiceSet
	11, // 42: SpaceX.API.Device.WifiConfig.Network.captive_portal:type_name -> SpaceX.API.Device.CaptivePortal
	31, // 43: SpaceX.API.Device.WifiConfig.Network.dns_static_entries:type_name -> SpaceX.API.Device.WifiConfig.DnsStaticEntry
	32, // 44: SpaceX.API.Device.WifiConfig.Network.dns_forward_rules:type_name -> SpaceX.API.Device.WifiConfig.DnsForwardRule
	33, // 45: SpaceX.API.Device.WifiConfig.Network.static_routes:type_name -> SpaceX.API.Device.WifiConfig.StaticRoute
	9,  // 46: SpaceX.API.Device.WifiConfig.Network.onboard_radius_tls_config:type_name -> SpaceX.API.Device.TlsConfig
	36, // 47: SpaceX.API.Device.WifiConfig.UnbridgedEthPort.static_routes:type_name -> SpaceX.API.Device.WifiConfig.UnbridgedEthPort.StaticRoute
	13, // 48: SpaceX.API.Device.WifiConfig.UnbridgedEthPort.wan_none:type_name -> SpaceX.API.Device.WanNone
	14, // 49: SpaceX.API.Device.WifiConfig.UnbridgedEthPort.wan_starlink_router_pair:type_name -> SpaceX.API.Device.WanStarlinkRouterPair
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_spacex_api_device_wifi_config_proto_init() }
func file_spacex_api_device_wifi_config_proto_init() {
	if File_spacex_api_device_wifi_config_proto != nil {
		return
	}
	file_spacex_api_device_command_proto_init()
	file_spacex_api_device_common_proto_init()
	file_spacex_api_device_wifi_util_proto_init()
	file_spacex_api_device_wifi_config_proto_msgTypes[4].OneofWrappers = []any{
		(*WifiConfig_WanNoTrafficControl)(nil),
		(*WifiConfig_WanAckSuppression)(nil),
		(*WifiConfig_WanCakeRateLimit)(nil),
	}
	file_spacex_api_device_wifi_config_proto_msgTypes[22].OneofWrappers = []any{
		(*WifiConfig_BasicServiceSet_AuthOpen)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa2)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa3)(nil),
		(*WifiConfig_BasicServiceSet_AuthWpa2Wpa3)(nil),
		(*WifiConfig_BasicServiceSet_AuthRadius)(nil),
		(*WifiConfig_BasicServiceSet_AuthOpenEncrypted)(nil),
		(*WifiConfig_BasicServiceSet_AuthOnboardRadius)(nil),
	}
	file_spacex_api_device_wifi_config_proto_msgTypes[27].OneofWrappers = []any{
		(*WifiConfig_UnbridgedEthPort_WanNone)(nil),
		(*WifiConfig_UnbridgedEthPort_WanStarlinkRouterPair)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_spacex_api_device_wifi_config_proto_rawDesc), len(file_spacex_api_device_wifi_config_proto_rawDesc)),
			NumEnums:      8,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spacex_api_device_wifi_config_proto_goTypes,
		DependencyIndexes: file_spacex_api_device_wifi_config_proto_depIdxs,
		EnumInfos:         file_spacex_api_device_wifi_config_proto_enumTypes,
		MessageInfos:      file_spacex_api_device_wifi_config_proto_msgTypes,
	}.Build()
	File_spacex_api_device_wifi_config_proto = out.File
	file_spacex_api_device_wifi_config_proto_goTypes = nil
	file_spacex_api_device_wifi_config_proto_depIdxs = nil
}
